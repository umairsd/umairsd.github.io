<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>puzzles on Umair&#39;s Blog</title>
    <link>http://example.com/categories/puzzles/</link>
    <description>Recent content in puzzles on Umair&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-US</language>
    <lastBuildDate>Wed, 18 Jul 2012 13:46:06 +0000</lastBuildDate>
    
	<atom:link href="http://example.com/categories/puzzles/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>A Quine in Objective-C</title>
      <link>http://example.com/posts/2012-07-18-a-quine-in-objective-c/</link>
      <pubDate>Wed, 18 Jul 2012 13:46:06 +0000</pubDate>
      
      <guid>http://example.com/posts/2012-07-18-a-quine-in-objective-c/</guid>
      <description>&lt;p&gt;A quine is a program that takes no input and outputs its own source code. It has been a while since I last wrote a quine, so I figured I&amp;rsquo;ll write one in Objective-C. In general, quines follow a fairly simple formula. The program contains a string that includes all the code before the string and all the code after the string. Depending on the programming language, the string might also contain format string (for languages that use format-strings to print to &lt;code&gt;stdout&lt;/code&gt;)&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Stern-Brocot Tree</title>
      <link>http://example.com/posts/2011-01-27-stern-brocot-tree/</link>
      <pubDate>Thu, 27 Jan 2011 13:56:15 +0000</pubDate>
      
      <guid>http://example.com/posts/2011-01-27-stern-brocot-tree/</guid>
      <description>&lt;p&gt;Stern-Brocot tree is a tree data structure whose vertices correspond to the set of non-negative rational numbers. Thus, this tree provides a very elegant way for constructing the set of fractions &lt;code&gt;m/n&lt;/code&gt;, where &lt;code&gt;m&lt;/code&gt; and &lt;code&gt;n&lt;/code&gt; are relatively prime. To construct the tree, the basic idea is to start with two fractions (&lt;code&gt;0/1&lt;/code&gt;, &lt;code&gt;1/0&lt;/code&gt;) and then repeat the following operation:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Insert (m+m&amp;rsquo;)/(n+n&amp;rsquo;) between two adjacent fractions m/n and m&amp;rsquo;/n&amp;rsquo;&lt;/p&gt;
&lt;/blockquote&gt;</description>
    </item>
    
  </channel>
</rss>