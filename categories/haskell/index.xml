<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>haskell on Umair&#39;s Blog</title>
    <link>https://umairsaeed.com/categories/haskell/</link>
    <description>Recent content in haskell on Umair&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-US</language>
    <lastBuildDate>Thu, 07 Jan 2016 00:00:00 +0000</lastBuildDate><atom:link href="https://umairsaeed.com/categories/haskell/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Applicative Laws for `((-&gt;) r)` Type</title>
      <link>https://umairsaeed.com/applicative-laws-for-function-type/</link>
      <pubDate>Thu, 07 Jan 2016 00:00:00 +0000</pubDate>
      
      <guid>https://umairsaeed.com/applicative-laws-for-function-type/</guid>
      <description>&lt;p&gt;Haskell&amp;rsquo;s function type &lt;code&gt;((-&amp;gt;) r)&lt;/code&gt; is an Applicative functor. Similar to the previous two posts in this series, in this post I will verify that the applicative laws hold for the &lt;code&gt;((-&amp;gt;) r)&lt;/code&gt; type.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Applicative Laws for `[]` Type</title>
      <link>https://umairsaeed.com/applicative-laws-for-list-type/</link>
      <pubDate>Wed, 06 Jan 2016 00:00:00 +0000</pubDate>
      
      <guid>https://umairsaeed.com/applicative-laws-for-list-type/</guid>
      <description>&lt;p&gt;Haskell&amp;rsquo;s list type &lt;code&gt;[]&lt;/code&gt; is an Applicative functor. Similar to the previous post, this post will verify that the applicative laws hold for the &lt;code&gt;[]&lt;/code&gt; type.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Applicative Laws for `Maybe` Type</title>
      <link>https://umairsaeed.com/applicative-laws-for-maybe-type/</link>
      <pubDate>Tue, 05 Jan 2016 00:00:00 +0000</pubDate>
      
      <guid>https://umairsaeed.com/applicative-laws-for-maybe-type/</guid>
      <description>&lt;p&gt;Applicative functors come with a set of laws that apply for all Applicative instances. These laws are as follows:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Identity: &lt;code&gt;pure id &amp;lt;*&amp;gt; v = v&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Homomorphism: &lt;code&gt;pure f &amp;lt;*&amp;gt; pure x = pure (f x)&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Interchange: &lt;code&gt;u &amp;lt;*&amp;gt; pure y = pure ($y) &amp;lt;*&amp;gt; u&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Composition: &lt;code&gt;pure (.) &amp;lt;*&amp;gt; u &amp;lt;*&amp;gt; v &amp;lt;*&amp;gt; w = u &amp;lt;*&amp;gt; (v &amp;lt;*&amp;gt; w)&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>Maybe as an Applicative Functor</title>
      <link>https://umairsaeed.com/maybe-as-an-applicative-functor/</link>
      <pubDate>Fri, 21 Aug 2015 09:53:20 -0700</pubDate>
      
      <guid>https://umairsaeed.com/maybe-as-an-applicative-functor/</guid>
      <description>&lt;p&gt;&lt;code&gt;Maybe&lt;/code&gt; type is made an instance of the &lt;code&gt;Applicative&lt;/code&gt; type class as follows:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-haskell&#34; data-lang=&#34;haskell&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;instance&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Applicative&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Maybe&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;where&lt;/span&gt;
    pure &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Just&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;Nothing&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;*&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;_&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Nothing&lt;/span&gt;
    (&lt;span style=&#34;color:#66d9ef&#34;&gt;Just&lt;/span&gt; f) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;*&amp;gt;&lt;/span&gt; something &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; fmap f something
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>Pascal&#39;s Triangle</title>
      <link>https://umairsaeed.com/pascals-triangle/</link>
      <pubDate>Wed, 08 Jul 2015 06:51:27 -0700</pubDate>
      
      <guid>https://umairsaeed.com/pascals-triangle/</guid>
      <description>&lt;p&gt;One of the exercises in &lt;a href=&#34;https://mitpress.mit.edu/sicp/&#34;&gt;Structure and Implementation of Computer Programs&lt;/a&gt; deals with generating elements of the &lt;a href=&#34;https://en.wikipedia.org/wiki/Pascal&#39;s_triangle&#34;&gt;Pascal&amp;rsquo;s Triangle&lt;/a&gt;.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Index Based List Operations Using folds in Haskell</title>
      <link>https://umairsaeed.com/index-based-list-operations-using-folds-in-haskell/</link>
      <pubDate>Sat, 16 May 2015 08:53:31 -0700</pubDate>
      
      <guid>https://umairsaeed.com/index-based-list-operations-using-folds-in-haskell/</guid>
      <description>&lt;p&gt;When working with lists in Haskell, occasionally there&amp;rsquo;s a need to perform index based operations, such as adding an element at a particular index. As a Haskell &lt;em&gt;newbie&lt;/em&gt;, using &lt;code&gt;foldl&lt;/code&gt; or &lt;code&gt;foldr&lt;/code&gt; is not the first idea that comes to mind when indices are involved. However, there is a general pattern that can be applied when using folds for index-based list operations.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Sublime Text &amp;amp; Haskell</title>
      <link>https://umairsaeed.com/sublime-text-and-haskell/</link>
      <pubDate>Sat, 02 May 2015 16:07:28 -0700</pubDate>
      
      <guid>https://umairsaeed.com/sublime-text-and-haskell/</guid>
      <description>&lt;p&gt;There are several excellent posts about setting up the Haskell development environment. One of the best ones is Tony Lawrence&amp;rsquo;s &lt;a href=&#34;http://tonylawrence.com/blog/2014/01/01/configuring-your-haskell-environment/&#34; title=&#34;Configuring Your Haskell Environment&#34;&gt;Configuring Your Haskell Environment&lt;/a&gt;. I encourage you to take a look at his post first.&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>
