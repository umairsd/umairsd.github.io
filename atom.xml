<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Umair's blog]]></title>
  <link href="http://umairsd.github.io/atom.xml" rel="self"/>
  <link href="http://umairsd.github.io/"/>
  <updated>2015-05-17T07:49:36-07:00</updated>
  <id>http://umairsd.github.io/</id>
  <author>
    <name><![CDATA[Umair Saeed]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    
    <title type="html"><![CDATA[Index based list operations using folds in Haskell]]></title>
    <link href="http://umairsd.github.io/blog/2015/05/16/index-based-list-operations-using-folds-in-haskell/"/>
    
    <updated>2015-05-16T08:53:31-07:00</updated>
    <id>http://umairsd.github.io/blog/2015/05/16/index-based-list-operations-using-folds-in-haskell</id>
    <content type="html"><![CDATA[<p>Whenever working with lists in Haskell, occasionally there&rsquo;s a need to perform index based operations, such as adding an element at a particular index. Going by my experience, using <code>foldl</code> or <code>foldr</code> is not the first idea that comes to mind for index based operations. However, there is a general pattern that can be applied when using folds for index-based list operations. For example, consider the case where we need to add an element at a particular index:</p>

<!-- more -->




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='haskell'><span class='line'><span class="c1">-- inserting at an index, using foldr</span>
</span><span class='line'><span class="nf">insertAt</span> <span class="ow">::</span> <span class="n">a</span> <span class="ow">-&gt;</span> <span class="p">[</span><span class="n">a</span><span class="p">]</span> <span class="ow">-&gt;</span> <span class="kt">Int</span> <span class="ow">-&gt;</span> <span class="p">[</span><span class="n">a</span><span class="p">]</span>
</span><span class='line'><span class="nf">insertAt</span> <span class="n">x</span> <span class="n">ys</span> <span class="n">n</span> <span class="ow">=</span> <span class="n">foldr</span> <span class="n">insertHelper</span> <span class="kt">[]</span> <span class="o">$</span> <span class="n">zip</span> <span class="p">[</span><span class="mi">0</span><span class="o">..</span><span class="p">]</span> <span class="n">ys</span>
</span><span class='line'>    <span class="kr">where</span>
</span><span class='line'>        <span class="n">insertHelper</span> <span class="p">(</span><span class="n">i</span><span class="p">,</span><span class="n">y</span><span class="p">)</span> <span class="n">acc</span> <span class="ow">=</span> <span class="kr">if</span> <span class="n">i</span> <span class="o">==</span> <span class="n">n</span>
</span><span class='line'>            <span class="kr">then</span> <span class="n">x</span> <span class="kt">:</span> <span class="n">y</span> <span class="kt">:</span> <span class="n">acc</span>
</span><span class='line'>            <span class="kr">else</span> <span class="n">y</span> <span class="kt">:</span> <span class="n">acc</span>
</span></code></pre></td></tr></table></div></figure>


<p>The basic idea is simple: We simply zip <code>[0..]</code> with the input list (<code>ys</code>) to get at a list of tuples. The first element of each tuple is the index of the element in the list <code>ys</code> (input list). This allows us to perform index based tests in the helper function, as shown in <code>insertHelper</code> above.</p>

<p>Both left and right folds can be used for index based list operations. Here&rsquo;s the same example using <code>foldl</code>.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='haskell'><span class='line'><span class="c1">-- inserting at an index, using foldl</span>
</span><span class='line'><span class="nf">insertAtL</span> <span class="ow">::</span> <span class="n">a</span> <span class="ow">-&gt;</span> <span class="p">[</span><span class="n">a</span><span class="p">]</span> <span class="ow">-&gt;</span> <span class="kt">Int</span> <span class="ow">-&gt;</span> <span class="p">[</span><span class="n">a</span><span class="p">]</span>
</span><span class='line'><span class="nf">insertAtL</span> <span class="n">x</span> <span class="n">ys</span> <span class="n">n</span> <span class="ow">=</span> <span class="n">foldl</span> <span class="n">insertLHelper</span> <span class="kt">[]</span> <span class="o">$</span> <span class="n">zip</span> <span class="p">[</span><span class="mi">0</span><span class="o">..</span><span class="p">]</span> <span class="n">ys</span>
</span><span class='line'>    <span class="kr">where</span>
</span><span class='line'>        <span class="n">insertLHelper</span> <span class="n">acc</span> <span class="p">(</span><span class="n">i</span><span class="p">,</span><span class="n">y</span><span class="p">)</span> <span class="ow">=</span> <span class="kr">if</span> <span class="n">i</span> <span class="o">==</span> <span class="n">n</span>
</span><span class='line'>            <span class="kr">then</span> <span class="n">acc</span> <span class="o">++</span> <span class="p">[</span><span class="n">x</span><span class="p">]</span> <span class="o">++</span> <span class="p">[</span><span class="n">y</span><span class="p">]</span>
</span><span class='line'>            <span class="kr">else</span> <span class="n">acc</span> <span class="o">++</span> <span class="p">[</span><span class="n">y</span><span class="p">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>Both left and right fold produce the same result. Adding an element to the head of the list (via <code>:</code>) is more efficient than concatenating lists (via <code>++</code>), so generally I prefer using the 1st version, i.e. one that uses <code>foldr</code></p>

<p><a href="https://gist.github.com/umairsd/cdcb397941762fe02d05">Here&rsquo;s a gist</a> with examples of  <code>insertAt</code>, <code>updateAt</code>, and <code>deleteAt</code> functions, all implemented using folds.</p>
]]></content>
  </entry>  
  
  <entry>
    
    <title type="html"><![CDATA[&rarr; Talking About Money]]></title><!-- &rarr; is the glyph -->
    <link href="http://www.kalzumeus.com/2015/05/01/talking-about-money/"/>
    
    <updated>2015-05-04T09:43:03-07:00</updated>
    <id>http://umairsd.github.io/blog/2015/05/04/talking-about-money</id>
    <content type="html"><![CDATA[<p>Patrick McKenzie wrote an excellent post about compensation and salary transparency. The entire post is really informative, but for me, this passage is a true gem. Every word here is absolutely true:</p>

<blockquote><p>Compensation negotiations are presently like a stock exchange where only your counterparty can see the ticker and order book. You’d never send an order to that exchange — it would be an invitation to be fleeced. “I happen to have a share of Google and want to sell it. What’s it go for?” “Oh, $200 or so.” “Really? That feels low.” “Alright, $205 then, but don’t be greedy.”</p>

<p>The spot price of Google when I write this is $535. Someone offering $205 for GOOG would shock the conscience. In the years since I wrote a post on salary negotiation for engineers I have received many letters suggesting folks have received and accepted employment offers much worse than that, relative to reasonably achievable market rates.</p></blockquote>

<p>When you are done reading this post, go and read his post <a href="http://www.kalzumeus.com/2012/01/23/salary-negotiation/">Salary Negotiation: Make More Money, Be More Valued</a>. Really informative and useful.</p>
]]></content>
  </entry>  
  
  <entry>
    
    <title type="html"><![CDATA[Sublime Text &amp; Haskell]]></title>
    <link href="http://umairsd.github.io/blog/2015/05/02/sublime-text-and-haskell/"/>
    
    <updated>2015-05-02T16:07:28-07:00</updated>
    <id>http://umairsd.github.io/blog/2015/05/02/sublime-text-and-haskell</id>
    <content type="html"><![CDATA[<p>There are several excellent posts about setting up the Haskell development environment. One of the best ones is Tony Lawrence&rsquo;s <a href="http://tonylawrence.com/blog/2014/01/01/configuring-your-haskell-environment/" title="Configuring Your Haskell Environment">Configuring Your Haskell Environment</a>. I encourage you to take a look at his post first.</p>

<p>Tony&rsquo;s post is more than a year old though, and it looks like a couple of things have changed since he wrote his post, especially with the latest version of Haskell and <a href="https://github.com/SublimeHaskell/SublimeHaskell" title="SublimeHaskell">SublimeHaskell</a>. I wasted a good chunk of time trying to get around those problems, so now writing this post in case others run into similar issues when setting up the SublimeHaskell plugin.</p>

<!-- more -->


<p>Here&rsquo;s a summary of the steps to setup the Haskell dev environment (from <a href="https://github.com/SublimeHaskell/SublimeHaskell" title="SublimeHaskell">Tony&rsquo;s blog</a>).</p>

<ul>
<li>Install the Haskell platform.</li>
<li>Issue <code>cabal update</code> to update the list of available packages for Haskell.</li>
<li>Install the requisite packages by issuing <code>cabal install aeson haskell-src-exts haddock hdevtools</code>.</li>
<li>Install Sublime Text 3.</li>
<li>Install Package Control for Sublime Text 3.</li>
<li>Install SublimeHaskell via Package Control.</li>
</ul>


<p>This last step doesn&rsquo;t work seamlessly. When I installed SublimeHaskell, I ran into the following error message in Sublime Text:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>SublimeHaskell: Failed to compile ModuleInspector
</span><span class='line'>
</span><span class='line'>/Users/umair/Library/Application Support/Sublime Text 3/Packages/SublimeHaskell/ModuleInspector.hs:141:12:
</span><span class='line'>    Not in scope: data constructor ‘H.PNeg’
</span><span class='line'>    Perhaps you meant ‘H.PRec’ (imported from Language.Haskell.Exts)</span></code></pre></td></tr></table></div></figure>


<p>The problem is described in more detail in <a href="https://github.com/SublimeHaskell/SublimeHaskell/issues/182" title="SublimeHaskell issue # 182">issue #182</a> on <a href="https://github.com/SublimeHaskell/SublimeHaskell" title="SublimeHaskell">SublimeHaskell&rsquo;s GitHub page</a>. The summary is that the master branch of SublimeHaskell is too slow to accomodate the removal of <code>PNeg</code> from <code>haskell-src-exts</code>. The solution is to use the <code>hsdev</code> branch of SublimeHaskell. This is done as follows (recommended by <a href="https://github.com/MoreAxes" title="GitHub user MoreAxes">MoreAxes</a> on comment thread for <a href="https://github.com/SublimeHaskell/SublimeHaskell/issues/182" title="SublimeHaskell issue # 182">issue #182</a>):</p>

<ul>
<li>In Sublime Text, launch Package Control (<code>cmd-shift-p</code>), and use the &lsquo;Add Repository&rsquo; command to add <code>https://github.com/SublimeHaskell/SublimeHaskell/tree/hsdev</code>.</li>
<li>Install SublimeHaskell with Package Control normally. Package Control looks in user-defined repositories first, so it is able to get SublimeHaskell from the <code>hsdev</code> branch.</li>
<li>Restart Sublime Text.</li>
</ul>


<p>You can now enter and build Haskell code from Sublime Text. To verify your setup, enter the following code in Sublime Text, and then hit <code>cmd-B</code></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='haskell'><span class='line'><span class="nf">main</span> <span class="ow">::</span> <span class="kt">IO</span><span class="nb">()</span>
</span><span class='line'><span class="nf">main</span> <span class="ow">=</span> <span class="kr">do</span>
</span><span class='line'>    <span class="n">print</span> <span class="s">&quot;Hello World&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>You will see the following printed:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='haskell'><span class='line'><span class="s">&quot;Hello World&quot;</span>
</span><span class='line'><span class="p">[</span><span class="kt">Finished</span> <span class="kr">in</span> <span class="mf">0.2</span><span class="n">s</span><span class="p">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>Here&rsquo;s a screenshot of my test file, with the output of the program:</p>

<p><img class="center" src="http://umairsd.github.io/images/sublime-text-haskell-test.png"></p>
]]></content>
  </entry>  
  
  <entry>
    
    <title type="html"><![CDATA[&rarr; Why Racket? Why Lisp?]]></title><!-- &rarr; is the glyph -->
    <link href="http://practicaltypography.com/why-racket-why-lisp.html"/>
    
    <updated>2015-03-27T10:30:53-07:00</updated>
    <id>http://umairsd.github.io/blog/2015/03/27/why-racket-why-lisp</id>
    <content type="html"><![CDATA[<p>A slightly older (from Aug 2014), but nonetheless great post by Matthew Butterick where he enumerates the benefits of learning to program in Lisp (or one of its dialects). Several very smart folks have written about the awesomeness of Lisp, but this is the first post I have read that provides a list of concrete examples of said benefits:</p>

<blockquote><p>I was hope­ful when I opened Pe­ter Seibel’s Prac­ti­cal Com­mon Lisp and saw that the in­tro­duc­tion was sub­ti­tled “Why Lisp?” Yes, tell me! Seibel echoes Gra­ham’s claim: “You’ll get more done, faster, us­ing [Lisp] than you would us­ing pretty much any other lan­guage.” OK, but how? Seibel won­ders whether “I like Lisp be­cause of some quirk in the way my brain is wired. It could even be ge­netic, since my dad has it too.” That’s not en­cour­ag­ing to those of us out­side your fam­ily. Ul­ti­mately, he sums up the ap­peal of Lisp by de­scrib­ing it as “the pro­gram­ma­ble pro­gram­ming lan­guage.” But I’ve never used a pro­gram­ma­ble pro­gram­ming lan­guage. Why should I start?</p>

<p>And by the way, when do I get the speed and power you keep promising?</p>

<p>In short—what’s in it for me, now?</p></blockquote>
]]></content>
  </entry>  
  
  <entry>
    
    <title type="html"><![CDATA[Book - Hackers &amp; Painters]]></title>
    <link href="http://umairsd.github.io/blog/2015/03/26/book-hackers-and-painters/"/>
    
    <updated>2015-03-26T10:00:12-07:00</updated>
    <id>http://umairsd.github.io/blog/2015/03/26/book-hackers-and-painters</id>
    <content type="html"><![CDATA[<p>A couple of days ago, I finished reading Paul Graham&rsquo;s book of essays <a href="http://www.amazon.com/Hackers-Painters-Big-Ideas-Computer/dp/1449389554">Hackers and Painters: Big Ideas from the Computer Age</a>, and thoroughly enjoyed the book. I had already read a few of these essays on his <a href="http://www.paulgraham.com/articles.html">website</a>, yet I still enjoyed re-reading them. This book is tremendously intelligent, insightful and inspiring, and several of these essays (and many passages) are worth re-reading periodically.</p>

<p>Here are some of the essays that I particularly enjoyed:</p>

<!-- more -->


<p><img class="center" src="http://umairsd.github.io/images/hackers_and_painters_book.jpg" title="Figure-1" ></p>

<p style="text-align:center;"> <em>I certainly plan on re-reading this book often. Here&rsquo;s my bookmarked copy</em></p>

<ul>
<li><p><a href="http://www.paulgraham.com/hp.html">Hackers &amp; Painters</a>
What does it mean to be a hacker? A great hacker? What is common between hackers and other makers? This essay explores all these ideas, and does so very well. Probably one of my favorites (though, it is hard to pick just one favorite).</p></li>
<li><p><a href="http://www.paulgraham.com/avg.html">Beating the averages</a>
Very thought provoking essay, and really resonated with me as it argues something that I too have observed. Not all <em>high-level</em> programming languages are equally powerful. Some languages are more powerful than others. Programming languages fall on different points on the power continuum, and moving higher on this contiuum has allowed me to think and reason about programs in more powerful ways. In liguistics, this is the <a href="http://en.wikipedia.org/wiki/Linguistic_relativity">Sapir-Whorf hypothesis</a>:</p></li>
</ul>


<blockquote><p>The principle of linguistic relativity holds that the structure of a language affects the ways in which its respective speakers conceptualize their world, i.e. their world view, or otherwise influences their cognitive processes.</p></blockquote>

<ul>
<li><p><a href="http://www.paulgraham.com/hundred.html">The hundred-year language</a>
Another way to think about programming languages is to think them on an evolutionary tree. In this scenario, some fall on evolutionary dead-ends, and thus do not have any intellectual descendants. Once we start thinking about programming languages using this model, it becomes easier to see how languages might evolve, and predict the future evolution of programming languages.</p></li>
<li><p><a href="http://www.paulgraham.com/wealth.html">How to make wealth</a>
I had not read this essay before, and had not given any serious thought to the difference betweeen money and wealth. This essay explores the differences between the two, and really sold me on the idea &ldquo;Wealth is what you want, not money&rdquo;. Great read &amp; very informative.</p></li>
</ul>

]]></content>
  </entry>  
  
  <entry>
    
    <title type="html"><![CDATA[A reboot]]></title>
    <link href="http://umairsd.github.io/blog/2015/01/31/a-reboot/"/>
    
    <updated>2015-01-31T06:54:18-08:00</updated>
    <id>http://umairsd.github.io/blog/2015/01/31/a-reboot</id>
    <content type="html"><![CDATA[<p>I started blogging occassionally a few years ago, and my first blog was on <a href="http://umairsd.wordpress.com">Wordpress.com</a>. However, for various reasons (life changes, scheduling, focus on work etc.) I pretty much stopped blogging. The oldest post on my Wordpress blog is from July 2012. Wow! Even I am surprised at how long it has been since I added anything new.</p>

<p>Back to 2015. I&rsquo;ve been thinking about rebooting my blog for several weeks, and finally decided to take the first step. I hope to blog more frequently than I&rsquo;ve done in the past few years.</p>

<p>For setup, I decided to generate my blog via <a href="http://octopress.org/">Octopress</a> and host it on <a href="https://pages.github.com/">GitHub Pages</a>. I really like Octopress&rsquo;s simplicity, look and feel, and control over various aspects of blog generation and hosting. Another advantage is that I do most of my writing in <a href="http://daringfireball.net/projects/markdown/">Markdown</a> format, which is the default for Octopress. Lastly, Octopress generates my blog as static HTML.</p>

<p>My next steps are to figure out what to do about my old Wordpress posts. I needed to decide whether I am going to import them here, link to them instead of importing, or simply ignore.</p>
]]></content>
  </entry>  
  
  <entry>
    
    <title type="html"><![CDATA[A Quine in Objective-C]]></title>
    <link href="http://umairsd.github.io/blog/2012/07/18/a-quine-in-objective-c/"/>
    
    <updated>2012-07-18T06:46:06-07:00</updated>
    <id>http://umairsd.github.io/blog/2012/07/18/a-quine-in-objective-c</id>
    <content type="html"><![CDATA[<p>A quine is a program that takes no input and outputs its own source code. It has been a while since I last wrote a quine, so I figured I&rsquo;ll write one in Objective-C. In general, quines follow a fairly simple formula. The program contains a string that includes all the code before the string and all the code after the string. Depending on the programming language, the string might also contain format string (for languages that use format-strings to print to stdout)</p>

<!-- More -->


<p>Here is the code for the quine. I&rsquo;ve broken the code below into segments to make it simpler to understand:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="cp">#import &lt;Foundation/Foundation.h&gt;  </span>
</span><span class='line'><span class="kt">int</span> <span class="nf">main</span> <span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="k">const</span> <span class="kt">char</span> <span class="o">*</span> <span class="n">argv</span><span class="p">[])</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">@autoreleasepool</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="bp">NSString</span> <span class="o">*</span><span class="n">str</span><span class="o">=</span><span class="s">@&quot; \</span>
</span><span class='line'><span class="s">            #import &lt;Foundation/Foundation.h&gt; %c \</span>
</span><span class='line'><span class="s">            int main (int argc, const char * argv[]) { @autoreleasepool { NSString *str= \</span>
</span><span class='line'><span class="s">            %c%c%@%c; \</span>
</span><span class='line'><span class="s">            NSLog(str, 10, 64, 34, str, 34);} return 0;}&quot;</span><span class="p">;</span>
</span><span class='line'>        <span class="n">NSLog</span><span class="p">(</span><span class="n">str</span><span class="p">,</span> <span class="mi">10</span><span class="p">,</span> <span class="mi">64</span><span class="p">,</span> <span class="mi">34</span><span class="p">,</span> <span class="n">str</span><span class="p">,</span> <span class="mi">34</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Before I go on, 10, 64 and 34 are the ASCII character codes for <code>newline</code>, <code>@</code>and <code>"</code>respectively. To make it clearer, I&rsquo;ve broken the string into four lines. The first two lines contain the source code before the string. The 3rd line is the format string and the last line is the source code after the string. Here&rsquo;s the code with all lines collapsed:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="cp">#import &lt;Foundation/Foundation.h&gt;  </span>
</span><span class='line'><span class="kt">int</span> <span class="nf">main</span> <span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="k">const</span> <span class="kt">char</span> <span class="o">*</span> <span class="n">argv</span><span class="p">[])</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">@autoreleasepool</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="bp">NSString</span> <span class="o">*</span><span class="n">str</span><span class="o">=</span><span class="s">@&quot;#import &lt;Foundation/Foundation.h&gt; %c int main (int argc, const char * argv[]) { @autoreleasepool { NSString *str=%c%c%@%c; NSLog(str, 10, 64, 34, str, 34);} return 0;}&quot;</span><span class="p">;</span>
</span><span class='line'>        <span class="n">NSLog</span><span class="p">(</span><span class="n">str</span><span class="p">,</span> <span class="mi">10</span><span class="p">,</span> <span class="mi">64</span><span class="p">,</span> <span class="mi">34</span><span class="p">,</span> <span class="n">str</span><span class="p">,</span> <span class="mi">34</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Finally, here&rsquo;s the output when you execute this program. As you can tell, this is the same as the original program (minus the whitespace)</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="cp">#import &lt;Foundation/Foundation.h&gt; </span>
</span><span class='line'> <span class="kt">int</span> <span class="nf">main</span> <span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="k">const</span> <span class="kt">char</span> <span class="o">*</span> <span class="n">argv</span><span class="p">[])</span> <span class="p">{</span> <span class="k">@autoreleasepool</span> <span class="p">{</span> <span class="bp">NSString</span> <span class="o">*</span><span class="n">str</span><span class="o">=</span><span class="s">@&quot;#import &lt;Foundation/Foundation.h&gt; %c int main (int argc, const char * argv[]) { @autoreleasepool { NSString *str=%c%c%@%c; NSLog(str, 10, 64, 34, str, 34);} return 0;}&quot;</span><span class="p">;</span> <span class="n">NSLog</span><span class="p">(</span><span class="n">str</span><span class="p">,</span> <span class="mi">10</span><span class="p">,</span> <span class="mi">64</span><span class="p">,</span> <span class="mi">34</span><span class="p">,</span> <span class="n">str</span><span class="p">,</span> <span class="mi">34</span><span class="p">);}</span> <span class="k">return</span> <span class="mi">0</span><span class="p">;}</span>
</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>  
  
  <entry>
    
    <title type="html"><![CDATA[Finding the Start of a Loop in a Circular Linked List]]></title>
    <link href="http://umairsd.github.io/blog/2011/06/23/finding-the-start-of-a-loop-in-a-circular-linked-list/"/>
    
    <updated>2011-06-23T06:54:07-07:00</updated>
    <id>http://umairsd.github.io/blog/2011/06/23/finding-the-start-of-a-loop-in-a-circular-linked-list</id>
    <content type="html"><![CDATA[<p>A lot of people are familiar with the problem of detecting a loop in a linked list. The problem goes as follows: “Given a linked list, what is the algorithm to determine if it has any cycles (loops)?”</p>

<p>The algorithm is pretty straightforward:</p>

<ol>
<li>We start at the beginning of the linked list with two pointers.</li>
<li>The first pointer is incremented through each node of the list. The second pointer moves twice as fast, and skips every other node.</li>
<li>If the linked list contains a loop, these two pointers will eventually meet at the same node, thus indicating that the linked list contains a loop.</li>
</ol>


<p>The algorithm is straightforward and it is relatively easy to create a mental model and get an intuitive sense of why it works.</p>

<p>Now, a slight twist to the same question asks: “Given a circular linked list, what is the algorithm to find the first node of the loop.”</p>

<!-- more -->


<p>For instance, in the circular list <code>A-&gt;B-&gt;C-&gt;D-&gt;E-&gt;C</code>, the first node of the loop is node C. The first part of the algorithm is identical to the algorithm for finding if there is a loop (above). Once a loop has been found, the following additional steps will give us the starting node of the loop:</p>

<ol>
<li>Once a loop as been detected (step-3 above), move one of the pointers to the beginning (head) of the linked list. The second pointer remains where it was at the end of step-3.</li>
<li>Increment both pointers one node at a time. The node at which the two pointers meet will be the starting node of the loop!</li>
</ol>


<p>This algorithm isn’t too difficult compared to the algorithm for detecting a loop. However, the mental model seems a bit trickier. Why and how does it always find the start of the loop?</p>

<h3>How does the Algorithm work? An intuitive explanation:</h3>

<p>Here’s some explanation which would hopefully help you intuitively understand why the algorithm works, without going into a lot of mathematical detail.</p>

<h4>First, meeting point of two pointers in a loop</h4>

<p>Consider two pointers: a slow pointer <code>S</code> that increments by one node at each step, and a fast pointer <code>F</code> that increments by two nodes at each step (i.e. it is twice as fast as <code>S</code>). Both pointers start at the same time from the beginning of an n-node loop. In the time <code>S</code> covers n nodes. <code>F</code> will have covered <code>2n</code> nodes and they will both meet at the start of the loop.</p>

<p>Now, let us say that the slow pointer <code>S</code> starts at the beginning of the loop, and the fast pointer <code>F</code> starts at node k (where k &lt; n) of the loop. As these two pointers move along the loop, they will meet at node (n-x).</p>

<p>What we really need to do is figure out x, as it will give us the node at which the two pointers meet inside the loop.</p>

<ol>
<li>When <code>S</code> takes <code>n/2</code> steps, it will be at node <code>n/2</code>. During the same time, <code>F</code> will have taken <code>2(n/2) = n</code> steps, and it will be at node <code>(k+n)</code>. Since the we are inside a loop, <code>F</code> will be effectively back at node <code>k</code>.</li>
<li>In order for the two pointers to meet at node <code>(n-x)</code>, <code>S</code> needs to take a further <code>(n-x-n/2)=(n/2-x)</code> steps and it will end up at node <code>n-x</code>. During the same time, <code>F</code> will have taken 2*(n/2-x)=(n-2x) steps and will be at node <code>k+(n-2x)</code>. Given our assumption that both S and <code>F</code> meet at the same node:</li>
</ol>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>     n-x = k+n-2x
</span><span class='line'>  =&gt;    x = k</span></code></pre></td></tr></table></div></figure>


<p>This means that if S starts from the start of the loop, and F starts k nodes into the loop, both of them will meet at node (n-k), i.e k nodes from the end of the loop. This is a key insight.</p>

<h4>Circular Linked List</h4>

<p>Now, coming back to the linked list that contains a loop. Suppose the start of the loop is <code>m</code> (e.g. <code>m</code>=3) nodes from the start of the linked list. Both <code>S</code> and <code>F</code> start at the beginning of the linked list [Figure-1].</p>

<p><img class="center" src="http://umairsd.github.io/images/circular-loop-figure-1.jpg" title="Figure-1" ></p>

<p style="text-align:center;"> <em>Figure-1: Circular linked list with S and F pointers at the start</em></p>

<p>By the time <code>S</code> gets to node <code>m</code> (i.e. start of loop), <code>F</code> will be at node <code>2m</code> [Figure-2]. This means that <code>S</code> will be at the start of the loop and <code>F</code> will be <code>m</code> nodes <em>into the loop</em>.</p>

<p><img class="center" src="http://umairsd.github.io/images/circular-loop-figure-2.jpg" title="Figure-2" ></p>

<p style="text-align:center;"> <em>Figure-2: Circular linked list, with S at the start of loop and F m nodes into the loop</em></p>

<p>Based on the discussion above, we already know that if <code>S</code> begins from the start of the loop and <code>F</code> starts from node <code>m</code>, they will meet <code>m</code> nodes from the end of the loop (i.e. the orange-node in [Figure-3]).</p>

<p><img class="center" src="http://umairsd.github.io/images/circular-loop-figure-3.jpg" title="Figure-3" ></p>

<p style="text-align:center;"> <em>Figure-3: Both F and S meet m nodes from the end of the loop</em></p>

<p>At this point, keep the pointer <code>F</code> at the orange-node where the two pointers met (i.e. <code>m</code>-nodes from the start of the loop), and move the pointer <code>S</code> to the beginning of the linked list [Figure-4]. Now, if we increment both <code>S</code> and <code>F</code> <em>one node at a time</em>, it is obvious that they will meet at &lsquo;Node-m&rsquo; (red-node) of the list, which is the start of the loop.</p>

<p><img class="center" src="http://umairsd.github.io/images/circular-loop-figure-4.jpg" title="Figure-4" ></p>

<p style="text-align:center;"> <em>Figure-4: S at the start of linked list, F at the point they met. Both increment one at a time from here-on</em></p>

<p>For the curious, here’s the Java code snippets for detecting a loop in a linked list and finding the starting node. The complete source code for my linked list project is at my Github page (<a href="https://github.com/umairsd/LinkedList-Java">https://github.com/umairsd/LinkedList-Java</a>):</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="cm">/**</span>
</span><span class='line'><span class="cm"> * Checks if the given linked list is a circular linked list (i.e. it</span>
</span><span class='line'><span class="cm"> * contains a loop). This means a list in which a node&#39;s next pointer points</span>
</span><span class='line'><span class="cm"> * to an earlier node, so as to make a loop in the linked list. For</span>
</span><span class='line'><span class="cm"> * instance:</span>
</span><span class='line'><span class="cm"> *           A -&gt; B -&gt; C -&gt; D -&gt; E -&gt; C</span>
</span><span class='line'><span class="cm"> *</span>
</span><span class='line'><span class="cm"> * @param linkedList</span>
</span><span class='line'><span class="cm"> *            the linked list to be tested</span>
</span><span class='line'><span class="cm"> * @return true if there is a loop, false if there isn&#39;t</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">static</span> <span class="kt">boolean</span> <span class="nf">hasLoop</span><span class="o">(</span><span class="n">LinkedList</span> <span class="n">linkedList</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>  <span class="k">if</span> <span class="o">(</span><span class="n">linkedList</span> <span class="o">==</span> <span class="kc">null</span> <span class="o">||</span> <span class="n">linkedList</span><span class="o">.</span><span class="na">getHead</span><span class="o">()</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="kc">false</span><span class="o">;</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">IntegerNode</span> <span class="n">slow</span> <span class="o">=</span> <span class="n">linkedList</span><span class="o">.</span><span class="na">getHead</span><span class="o">();</span>
</span><span class='line'>  <span class="n">IntegerNode</span> <span class="n">fast</span> <span class="o">=</span> <span class="n">linkedList</span><span class="o">.</span><span class="na">getHead</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">while</span> <span class="o">(</span><span class="kc">true</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">slow</span> <span class="o">=</span> <span class="n">slow</span><span class="o">.</span><span class="na">getNext</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'>      <span class="k">if</span> <span class="o">(</span><span class="n">fast</span><span class="o">.</span><span class="na">getNext</span><span class="o">()</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>          <span class="n">fast</span> <span class="o">=</span> <span class="n">fast</span><span class="o">.</span><span class="na">getNext</span><span class="o">().</span><span class="na">getNext</span><span class="o">();</span>
</span><span class='line'>      <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
</span><span class='line'>          <span class="k">return</span> <span class="kc">false</span><span class="o">;</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>      <span class="k">if</span> <span class="o">(</span><span class="n">slow</span> <span class="o">==</span> <span class="kc">null</span> <span class="o">||</span> <span class="n">fast</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>          <span class="k">return</span> <span class="kc">false</span><span class="o">;</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>      <span class="k">if</span> <span class="o">(</span><span class="n">slow</span> <span class="o">==</span> <span class="n">fast</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>          <span class="k">return</span> <span class="kc">true</span><span class="o">;</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="cm">/**</span>
</span><span class='line'><span class="cm"> * Returns the node at the start of a loop in the given circular linked</span>
</span><span class='line'><span class="cm"> * list. A circular list is one in which a node&#39;s next pointer points</span>
</span><span class='line'><span class="cm"> * to an earlier node, so as to make a loop in the linked list. For</span>
</span><span class='line'><span class="cm"> * instance:</span>
</span><span class='line'><span class="cm"> *</span>
</span><span class='line'><span class="cm"> * input: A -&gt; B -&gt; C -&gt; D -&gt; E -&gt; C [the same C as earlier]</span>
</span><span class='line'><span class="cm"> * output: C</span>
</span><span class='line'><span class="cm"> *</span>
</span><span class='line'><span class="cm"> * (CCI_0205)</span>
</span><span class='line'><span class="cm"> *</span>
</span><span class='line'><span class="cm"> * @param linkedList</span>
</span><span class='line'><span class="cm"> *            list to be tested</span>
</span><span class='line'><span class="cm"> * @return the node at the start of the loop if there is a loop, null</span>
</span><span class='line'><span class="cm"> * otherwise</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">static</span> <span class="n">IntegerNode</span> <span class="nf">findLoopStart</span><span class="o">(</span><span class="n">LinkedList</span> <span class="n">linkedList</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>  <span class="k">if</span> <span class="o">(</span><span class="n">linkedList</span> <span class="o">==</span> <span class="kc">null</span> <span class="o">||</span> <span class="n">linkedList</span><span class="o">.</span><span class="na">getHead</span><span class="o">()</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="kc">null</span><span class="o">;</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">IntegerNode</span> <span class="n">loopStartNode</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
</span><span class='line'>  <span class="n">IntegerNode</span> <span class="n">slow</span> <span class="o">=</span> <span class="n">linkedList</span><span class="o">.</span><span class="na">getHead</span><span class="o">();</span>
</span><span class='line'>  <span class="n">IntegerNode</span> <span class="n">fast</span> <span class="o">=</span> <span class="n">linkedList</span><span class="o">.</span><span class="na">getHead</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">while</span> <span class="o">(</span><span class="n">slow</span> <span class="o">!=</span> <span class="kc">null</span> <span class="o">&amp;&amp;</span> <span class="n">fast</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">slow</span> <span class="o">=</span> <span class="n">slow</span><span class="o">.</span><span class="na">getNext</span><span class="o">();</span>
</span><span class='line'>      <span class="k">if</span> <span class="o">(</span><span class="n">fast</span><span class="o">.</span><span class="na">getNext</span><span class="o">()</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>          <span class="n">loopStartNode</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
</span><span class='line'>          <span class="k">break</span><span class="o">;</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>      <span class="n">fast</span> <span class="o">=</span> <span class="n">fast</span><span class="o">.</span><span class="na">getNext</span><span class="o">().</span><span class="na">getNext</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'>      <span class="c1">// If slow and fast point to the same node, it means that the</span>
</span><span class='line'>      <span class="c1">// linkedList contains a loop.</span>
</span><span class='line'>      <span class="k">if</span> <span class="o">(</span><span class="n">slow</span> <span class="o">==</span> <span class="n">fast</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>          <span class="n">slow</span> <span class="o">=</span> <span class="n">linkedList</span><span class="o">.</span><span class="na">getHead</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'>          <span class="k">while</span> <span class="o">(</span><span class="n">slow</span> <span class="o">!=</span> <span class="n">fast</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>              <span class="c1">// Keep incrementing the two pointers until they both</span>
</span><span class='line'>              <span class="c1">// meet again. When this happens, both the pointers will</span>
</span><span class='line'>              <span class="c1">// point to the beginning of the loop</span>
</span><span class='line'>              <span class="n">slow</span> <span class="o">=</span> <span class="n">slow</span><span class="o">.</span><span class="na">getNext</span><span class="o">();</span> <span class="c1">// Can&#39;t be null, as we have a loop</span>
</span><span class='line'>              <span class="n">fast</span> <span class="o">=</span> <span class="n">fast</span><span class="o">.</span><span class="na">getNext</span><span class="o">();</span> <span class="c1">// Can&#39;t be null, as we have a loop</span>
</span><span class='line'>          <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>          <span class="n">loopStartNode</span> <span class="o">=</span> <span class="n">slow</span><span class="o">;</span>
</span><span class='line'>          <span class="k">break</span><span class="o">;</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">return</span> <span class="n">loopStartNode</span><span class="o">;</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>  
  
  <entry>
    
    <title type="html"><![CDATA[Stern-Brocot Tree]]></title>
    <link href="http://umairsd.github.io/blog/2011/01/27/stern-brocot-tree/"/>
    
    <updated>2011-01-27T05:56:15-08:00</updated>
    <id>http://umairsd.github.io/blog/2011/01/27/stern-brocot-tree</id>
    <content type="html"><![CDATA[<p>Stern-Brocot tree is a tree data structure whose vertices correspond to the set of non-negative rational numbers. Thus, this tree provides a very elegant way for constructing the set of fractions <code>m/n</code>, where <code>m</code> and <code>n</code> are relatively prime. To construct the tree, the basic idea is to start with two fractions (<code>0/1</code>, <code>1/0</code>) and then repeat the following operation:</p>

<p><strong>Insert (m+m&#8217;)/(n+n&#8217;) between two adjacent fractions m/n and m&#8217;/n&#8217;</strong></p>

<!-- More -->


<p>The first step gives us the entry <code>1/1</code> between <code>0/1</code> and <code>1/0</code>. Similarly, the 2nd step gives us two more: <code>0/1</code>, <code>1/2</code>, <code>1/1</code>, <code>2/1</code>, <code>1/0</code>.</p>

<p>Continuing on like this results in an infinite binary search tree which preserves the usual ordering of rational numbers.</p>

<p>The figure below shows the 1st 4 levels of the Stern-Brocot tree.</p>

<p><img class="center" src="http://umairsd.github.io/images/stern-brocot.png" title="Stern-brocot" ></p>

<p style="text-align:center;"> <em>The first 4 levels of Stern-Brocot Tree</em></p>

<h3>Finding the Path to k in Stern-Brocot Tree</h3>

<p>The path from the root of the tree to a number <code>k</code> in the Stern-Brocot tree can be found using binary search. At each node, <code>k</code> will either be in the left half of the tree, or the right half. We continue down the left or right subtree until we finally find <code>k</code>.</p>

<ul>
<li>Initialize the left fraction <code>L</code> to <code>0/1</code> and right fraction <code>R</code> to <code>1/0</code></li>
<li>Repeat the following until <code>k</code> is found:

<ul>
<li>Compute the mediant <code>M</code> (which is <code>(m+m')/(n+n')</code> )</li>
<li>If <code>(k&gt;M)</code>, then <code>k</code> is in the right half of the tree. <code>L:=M</code> and continue.</li>
<li>Else If <code>(M&gt;k)</code>, then <code>k</code> is in the left half of the tree. <code>R:=M</code> and continue.</li>
<li>Else <code>k=M</code>, terminate search.</li>
</ul>
</li>
</ul>


<h3>Implementation</h3>

<p>There&rsquo;s a couple of things to tackle in our implementation. First, I need an easy way to represent fractions, so I create my own <code>SternBrocotFraction</code> class. I deliberately chose to make it very specific to this algorithm because I needed a special way to handle the fraction 1/0 (which by definition is greater than all other rationals).</p>

<p>Secondly, I needed a good way to represent the path from the root of the tree to k. I do this by using a <code>StringBuilder</code>, and at each step I append either the letter <code>L</code> or <code>R</code> depending on which sub-tree we take. When the search is finished, this gives us a string representation of the path from the root of the tree to the number <code>k</code>. This approach is similar to the approach advocated by ACM Programming Competitions for <a href="http://acm.uva.es/p/v100/10077.html">the &ldquo;Stern-Brocot Number System&rdquo; problem</a>.</p>

<p>Here&rsquo;s the code to find path to a number k:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kn">package</span> <span class="n">com</span><span class="o">.</span><span class="na">umairsaeed</span><span class="o">.</span><span class="na">algorithm</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">SternBrocotPath</span> <span class="o">{</span>
</span><span class='line'>  <span class="kd">private</span> <span class="kd">static</span> <span class="kd">final</span> <span class="kt">char</span> <span class="n">LEFT_SUB</span> <span class="o">=</span> <span class="sc">&#39;L&#39;</span><span class="o">;</span>
</span><span class='line'>  <span class="kd">private</span> <span class="kd">static</span> <span class="kd">final</span> <span class="kt">char</span> <span class="n">RIGHT_SUB</span> <span class="o">=</span> <span class="sc">&#39;R&#39;</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">public</span> <span class="n">String</span> <span class="nf">findPathTo</span><span class="o">(</span><span class="n">SternBrocotFraction</span> <span class="n">f</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">SternBrocotFraction</span> <span class="n">L</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">SternBrocotFraction</span><span class="o">(</span><span class="mi">0</span><span class="o">,</span> <span class="mi">1</span><span class="o">);</span>
</span><span class='line'>      <span class="n">SternBrocotFraction</span> <span class="n">R</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">SternBrocotFraction</span><span class="o">(</span><span class="mi">1</span><span class="o">,</span> <span class="mi">0</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>      <span class="n">StringBuilder</span> <span class="n">results</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">StringBuilder</span><span class="o">();</span>
</span><span class='line'>      <span class="n">SternBrocotPath</span><span class="o">.</span><span class="na">find</span><span class="o">(</span><span class="n">f</span><span class="o">,</span> <span class="n">L</span><span class="o">,</span> <span class="n">R</span><span class="o">,</span> <span class="n">results</span><span class="o">);</span>
</span><span class='line'>      <span class="k">return</span> <span class="n">results</span><span class="o">.</span><span class="na">toString</span><span class="o">();</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">find</span><span class="o">(</span><span class="n">SternBrocotFraction</span> <span class="n">f</span><span class="o">,</span>
</span><span class='line'>          <span class="n">SternBrocotFraction</span> <span class="n">L</span><span class="o">,</span>
</span><span class='line'>          <span class="n">SternBrocotFraction</span> <span class="n">R</span><span class="o">,</span>
</span><span class='line'>          <span class="n">StringBuilder</span> <span class="n">results</span><span class="o">)</span>
</span><span class='line'>  <span class="o">{</span>
</span><span class='line'>      <span class="n">SternBrocotFraction</span> <span class="n">M</span> <span class="o">=</span> <span class="n">L</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">R</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>      <span class="k">if</span> <span class="o">(</span><span class="n">M</span><span class="o">.</span><span class="na">compareTo</span><span class="o">(</span><span class="n">f</span><span class="o">)</span> <span class="o">&lt;</span> <span class="mi">0</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>          <span class="n">L</span> <span class="o">=</span> <span class="n">M</span><span class="o">;</span>
</span><span class='line'>          <span class="n">results</span><span class="o">.</span><span class="na">append</span><span class="o">(</span><span class="n">RIGHT_SUB</span><span class="o">);</span>
</span><span class='line'>          <span class="n">SternBrocotPath</span><span class="o">.</span><span class="na">find</span><span class="o">(</span><span class="n">f</span><span class="o">,</span> <span class="n">L</span><span class="o">,</span> <span class="n">R</span><span class="o">,</span> <span class="n">results</span><span class="o">);</span>
</span><span class='line'>      <span class="o">}</span> <span class="k">else</span> <span class="nf">if</span> <span class="o">(</span><span class="n">M</span><span class="o">.</span><span class="na">compareTo</span><span class="o">(</span><span class="n">f</span><span class="o">)</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>          <span class="n">R</span> <span class="o">=</span> <span class="n">M</span><span class="o">;</span>
</span><span class='line'>          <span class="n">results</span><span class="o">.</span><span class="na">append</span><span class="o">(</span><span class="n">LEFT_SUB</span><span class="o">);</span>
</span><span class='line'>          <span class="n">SternBrocotPath</span><span class="o">.</span><span class="na">find</span><span class="o">(</span><span class="n">f</span><span class="o">,</span> <span class="n">L</span><span class="o">,</span> <span class="n">R</span><span class="o">,</span> <span class="n">results</span><span class="o">);</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>      <span class="k">return</span><span class="o">;</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>The special <code>SternBrocotFraction</code> class is:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kn">package</span> <span class="n">com</span><span class="o">.</span><span class="na">umairsaeed</span><span class="o">.</span><span class="na">algorithm</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">SternBrocotFraction</span> <span class="kd">implements</span>
</span><span class='line'>              <span class="n">Comparable</span><span class="o">&lt;</span><span class="n">SternBrocotFraction</span><span class="o">&gt;</span> <span class="o">{</span>
</span><span class='line'>  <span class="kd">private</span> <span class="kt">int</span> <span class="n">numerator</span><span class="o">;</span>
</span><span class='line'>  <span class="kd">private</span> <span class="kt">int</span> <span class="n">denominator</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">public</span> <span class="nf">SternBrocotFraction</span><span class="o">(</span><span class="kt">int</span> <span class="n">numerator</span><span class="o">,</span> <span class="kt">int</span> <span class="n">denominator</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">if</span> <span class="o">(</span><span class="n">denominator</span> <span class="o">&lt;</span> <span class="mi">0</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>          <span class="n">numerator</span> <span class="o">*=</span> <span class="o">-</span><span class="mi">1</span><span class="o">;</span>
</span><span class='line'>          <span class="n">denominator</span> <span class="o">*=</span> <span class="o">-</span><span class="mi">1</span><span class="o">;</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>      <span class="k">this</span><span class="o">.</span><span class="na">numerator</span> <span class="o">=</span> <span class="n">numerator</span><span class="o">;</span>
</span><span class='line'>      <span class="k">this</span><span class="o">.</span><span class="na">denominator</span> <span class="o">=</span> <span class="n">denominator</span><span class="o">;</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">public</span> <span class="kt">double</span> <span class="nf">doubleValue</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">if</span> <span class="o">(</span><span class="k">this</span><span class="o">.</span><span class="na">denominator</span> <span class="o">==</span> <span class="mi">0</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>          <span class="k">return</span> <span class="n">Double</span><span class="o">.</span><span class="na">MAX_VALUE</span><span class="o">;</span>
</span><span class='line'>      <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
</span><span class='line'>          <span class="k">return</span> <span class="o">(</span><span class="kt">double</span><span class="o">)</span> <span class="k">this</span><span class="o">.</span><span class="na">numerator</span> <span class="o">/</span>
</span><span class='line'>                      <span class="o">(</span><span class="kt">double</span><span class="o">)</span> <span class="k">this</span><span class="o">.</span><span class="na">denominator</span><span class="o">;</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">public</span> <span class="n">SternBrocotFraction</span> <span class="nf">add</span><span class="o">(</span><span class="n">SternBrocotFraction</span> <span class="n">other</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="k">new</span> <span class="nf">SternBrocotFraction</span><span class="o">(</span>
</span><span class='line'>              <span class="k">this</span><span class="o">.</span><span class="na">numerator</span> <span class="o">+</span> <span class="n">other</span><span class="o">.</span><span class="na">numerator</span><span class="o">,</span>
</span><span class='line'>              <span class="k">this</span><span class="o">.</span><span class="na">denominator</span> <span class="o">+</span> <span class="n">other</span><span class="o">.</span><span class="na">denominator</span><span class="o">);</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">public</span> <span class="kt">int</span> <span class="nf">compareTo</span><span class="o">(</span><span class="n">SternBrocotFraction</span> <span class="n">other</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">if</span> <span class="o">(</span><span class="k">this</span><span class="o">.</span><span class="na">doubleValue</span><span class="o">()</span> <span class="o">&lt;</span> <span class="n">other</span><span class="o">.</span><span class="na">doubleValue</span><span class="o">())</span> <span class="o">{</span>
</span><span class='line'>          <span class="k">return</span> <span class="o">-</span><span class="mi">1</span><span class="o">;</span>
</span><span class='line'>      <span class="o">}</span> <span class="k">else</span> <span class="nf">if</span> <span class="o">(</span><span class="k">this</span><span class="o">.</span><span class="na">doubleValue</span><span class="o">()</span> <span class="o">&gt;</span> <span class="n">other</span><span class="o">.</span><span class="na">doubleValue</span><span class="o">())</span> <span class="o">{</span>
</span><span class='line'>          <span class="k">return</span> <span class="mi">1</span><span class="o">;</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>      <span class="k">return</span> <span class="mi">0</span><span class="o">;</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Finally, some test code to exercise my class:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kn">package</span> <span class="n">com</span><span class="o">.</span><span class="na">umairsaeed</span><span class="o">.</span><span class="na">algorithm</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">SternBrocotTester</span> <span class="o">{</span>
</span><span class='line'>  <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">testSternBrocotPath</span><span class="o">();</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">testSternBrocotPath</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">SternBrocotPath</span> <span class="n">t</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">SternBrocotPath</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'>      <span class="n">SternBrocotFraction</span> <span class="n">f</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">SternBrocotFraction</span><span class="o">(</span><span class="mi">5</span><span class="o">,</span> <span class="mi">7</span><span class="o">);</span>
</span><span class='line'>      <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">t</span><span class="o">.</span><span class="na">findPathTo</span><span class="o">(</span><span class="n">f</span><span class="o">));</span>
</span><span class='line'>
</span><span class='line'>      <span class="n">f</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">SternBrocotFraction</span><span class="o">(</span><span class="mi">19</span><span class="o">,</span> <span class="mi">101</span><span class="o">);</span>
</span><span class='line'>      <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">t</span><span class="o">.</span><span class="na">findPathTo</span><span class="o">(</span><span class="n">f</span><span class="o">));</span>
</span><span class='line'>
</span><span class='line'>      <span class="n">f</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">SternBrocotFraction</span><span class="o">(</span><span class="mi">977</span><span class="o">,</span> <span class="mi">331</span><span class="o">);</span>
</span><span class='line'>      <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">t</span><span class="o">.</span><span class="na">findPathTo</span><span class="o">(</span><span class="n">f</span><span class="o">));</span>
</span><span class='line'>
</span><span class='line'>      <span class="n">f</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">SternBrocotFraction</span><span class="o">(</span><span class="mi">1049</span><span class="o">,</span> <span class="mi">7901</span><span class="o">);</span>
</span><span class='line'>      <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">t</span><span class="o">.</span><span class="na">findPathTo</span><span class="o">(</span><span class="n">f</span><span class="o">));</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>  
  
  <entry>
    
    <title type="html"><![CDATA[Manual Memory Management in Objective-C]]></title>
    <link href="http://umairsd.github.io/blog/2011/01/24/manual-memory-management-in-objective-c/"/>
    
    <updated>2011-01-24T11:10:40-08:00</updated>
    <id>http://umairsd.github.io/blog/2011/01/24/manual-memory-management-in-objective-c</id>
    <content type="html"><![CDATA[<p>Objective-C on iOS has no garbage collector, so it is up to the programmer to make sure that memory is properly freed once an object is no longer needed. On the other hand, Objective-C on the Mac does have a garbage collector (in Objective C 2.0). This blog post focuses on how to manage memory in the absence of a garbage collector.</p>

<!-- More -->


<p>When managing memory manually, two major issues to watch out for are premature deallocation and memory leaks.</p>

<p>Cocoa Touch framework uses manual <a href="http://en.wikipedia.org/wiki/Reference_counting">reference counting</a> to manage memory on the iOS devices. Reference counting works on the principle that once created, every object has an owner. During its existence, its owner may change and it may even have more than one owners. When the number of owners for an object drops to zero, it deallocates itself to free up the memory being used.</p>

<h4>retain &amp; release</h4>

<p>Owners are tracked via retain counts. When an object is created it always has a retain count of 1. To own an object its retain count is incremented via the <code>retain</code> message. On the other hand, when the object is no longer needed its ownership is relinquished by decrementing the retain count via the <code>release</code> message. When the count reaches zero, the object sends itself the <code>dealloc</code> message and returns all the memory back to the heap.</p>

<h4>autorelease</h4>

<p><code>autorelease</code> marks an object for future release (delayed release). When an object is sent the autorelease message, it is added to an instance of <code>NSAutoreleasePool</code>. The Autorelease pool keeps track of all the objects that have been sent the <code>autorelease</code> message. This pool is drained periodically, at which time all the objects within it are sent the release message.</p>

<p><code>autorelease</code> is really handy when the creator of an object (e.g. a factory) simply creates the object and returns it to the caller. At this point, the creator has nothing to do with the object anymore, so it is up to the caller to retain the returned object in order to continue using it.</p>

<h4>An Example - A Ticket class</h4>

<p>Let us work through an example to see manual memory management in action. Suppose I am writing a ticketing framework, and I have a Ticket entity. The header file for Ticket looks as:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">@interface</span> <span class="nc">Ticket</span> : <span class="bp">NSObject</span> <span class="p">{</span>
</span><span class='line'>  <span class="bp">NSString</span> <span class="o">*</span><span class="n">ticketId</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="p">-</span> <span class="p">(</span><span class="bp">NSString</span> <span class="o">*</span><span class="p">)</span> <span class="nf">ticketId</span><span class="p">;</span>
</span><span class='line'><span class="p">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span> <span class="nf">setTicketId:</span><span class="p">(</span><span class="bp">NSString</span> <span class="o">*</span><span class="p">)</span> <span class="nv">tid</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="p">-</span> <span class="p">(</span><span class="kt">id</span><span class="p">)</span> <span class="nf">initWithId:</span><span class="p">(</span><span class="bp">NSString</span> <span class="o">*</span><span class="p">)</span> <span class="nv">tid</span><span class="p">;</span>
</span><span class='line'><span class="p">+</span> <span class="p">(</span><span class="kt">id</span><span class="p">)</span> <span class="nf">ticketWithId:</span><span class="p">(</span><span class="bp">NSString</span> <span class="o">*</span><span class="p">)</span> <span class="nv">tid</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">@end</span>
</span></code></pre></td></tr></table></div></figure>


<p>And the implementation file for Ticket looks as follows:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="cp">#import &quot;Ticket.h&quot;</span>
</span><span class='line'><span class="k">@implementation</span> <span class="nc">Ticket</span>
</span><span class='line'>
</span><span class='line'><span class="p">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span> <span class="nf">dealloc</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="p">[</span><span class="n">ticketId</span> <span class="k">release</span><span class="p">];</span>
</span><span class='line'>  <span class="p">[</span><span class="nb">super</span> <span class="n">dealloc</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="p">-</span> <span class="p">(</span><span class="bp">NSString</span> <span class="o">*</span><span class="p">)</span> <span class="nf">ticketId</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">ticketId</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="p">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span> <span class="nf">setTicketId:</span><span class="p">(</span><span class="bp">NSString</span> <span class="o">*</span><span class="p">)</span><span class="nv">tid</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="p">[</span><span class="n">tid</span> <span class="k">retain</span><span class="p">];</span>
</span><span class='line'>  <span class="p">[</span><span class="n">ticketId</span> <span class="k">release</span><span class="p">];</span>
</span><span class='line'>  <span class="n">ticketId</span> <span class="o">=</span> <span class="n">tid</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="p">-</span> <span class="p">(</span><span class="kt">id</span><span class="p">)</span> <span class="nf">initWithId:</span><span class="p">(</span><span class="bp">NSString</span> <span class="o">*</span><span class="p">)</span> <span class="nv">tid</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="nb">self</span> <span class="o">=</span> <span class="p">[</span><span class="nb">super</span> <span class="n">init</span><span class="p">])</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>      <span class="p">[</span><span class="nb">self</span> <span class="nl">setTicketId</span><span class="p">:</span><span class="n">tid</span><span class="p">];</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">return</span> <span class="nb">self</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="p">+</span> <span class="p">(</span><span class="kt">id</span><span class="p">)</span> <span class="nf">ticketWithId:</span><span class="p">(</span><span class="bp">NSString</span> <span class="o">*</span><span class="p">)</span><span class="nv">tid</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="n">Ticket</span> <span class="o">*</span><span class="n">newTkt</span> <span class="o">=</span> <span class="p">[[</span><span class="n">Ticket</span> <span class="n">alloc</span><span class="p">]</span> <span class="nl">initWithId</span><span class="p">:</span><span class="n">tid</span><span class="p">];</span>
</span><span class='line'>  <span class="k">return</span> <span class="p">[</span><span class="n">newTkt</span> <span class="n">autorelease</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">@end</span>
</span></code></pre></td></tr></table></div></figure>


<p>There are three memory management points to note here:</p>

<ol>
<li><p>Inside <code>dealloc</code>, an object must release all its instance variables first. Then it should go up its class hierarchy and release any instance variables of its superclass. We should never directly send the <code>dealloc</code> message to instance variables, as some other objects might still have references to those variables.</p></li>
<li><p>A setter must retain the value passed in before it releases the old value, as <code>tid</code> and <code>ticketId</code> could be pointers to the same object.</p></li>
<li><p>The <code>ticketWithId:</code> method creates a ticket and simply returns it to the caller. It has no use for the <code>newTkt</code>, but it owns <code>newTkt</code> by virtue of creating it. At this point, if <code>newTkt</code> were released before method exit, then the caller would get a pointer to unallocated heap. To avoid this, we put the <code>newTkt</code> on the autorelease pool. Periodically, the autorelease pool is drained and all the objects it it are sent the <code>release</code> message thus decrementing the retain count.</p></li>
</ol>


<p>Essentially, the <code>ticketWithId:</code> method is saying that it does not want to be the owner for <code>newTkt</code> and puts that responsibility on the caller. If the caller wants to hold on to <code>newTkt</code> once it is returned, it must send it the <code>retain</code> message.</p>

<h4>Using the Ticket class:</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="c1">// EXAMPLE-1</span>
</span><span class='line'><span class="p">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span> <span class="nf">processTicketWithId:</span><span class="p">(</span><span class="bp">NSString</span> <span class="o">*</span><span class="p">)</span><span class="nv">ticketId</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="n">Ticket</span><span class="o">*</span> <span class="n">tkt</span> <span class="o">=</span> <span class="p">[[</span><span class="n">Ticket</span> <span class="n">alloc</span><span class="p">]</span> <span class="nl">initWithId</span><span class="p">:</span><span class="n">ticketId</span><span class="p">];</span>
</span><span class='line'>  <span class="c1">// Do something with tkt</span>
</span><span class='line'>  <span class="c1">// ...</span>
</span><span class='line'>  <span class="p">[</span><span class="n">tkt</span> <span class="k">release</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>At this point, the retain count for <code>tkt</code> is 1. Moreover, since the <code>processTicketWithId:</code> method created the <code>tkt</code> object, it is now the owner and thus is responsible for cleaning it up before this method exits. Clean up is done by sending it the <code>release</code> message
Let&rsquo;s see another example:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="c1">// EXAMPLE-2</span>
</span><span class='line'><span class="p">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span> <span class="nf">processTicketWithId:</span><span class="p">(</span><span class="bp">NSString</span> <span class="o">*</span><span class="p">)</span><span class="nv">ticketId</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="n">Ticket</span><span class="o">*</span> <span class="n">tkt</span> <span class="o">=</span> <span class="p">[</span><span class="n">Ticket</span> <span class="nl">ticketWithId</span><span class="p">:</span><span class="n">ticketId</span><span class="p">];</span>
</span><span class='line'>  <span class="p">[</span><span class="n">tkt</span> <span class="k">retain</span><span class="p">];</span>
</span><span class='line'>  <span class="c1">// Do something with tkt</span>
</span><span class='line'>  <span class="c1">// ..</span>
</span><span class='line'>  <span class="p">[</span><span class="n">tkt</span> <span class="k">release</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>In this example, the memory for <code>tkt</code> wasn&rsquo;t allocated by <code>processTicketWithId</code> method, so it doesn&rsquo;t own the <code>tkt</code> object. However, as we&rsquo;ve seen in the implementation of the Ticket class, the <code>ticketWithId:</code> method created the Ticket object and added it to the autorelease pool. In order to continue using <code>tkt</code>, we must retain it so that even if it is drained from the autorelease pool, we can still continue to use the <code>tkt</code> object. Once done, we need to clean up and send the release message.</p>

<h4>Summary of Memory Management Rules for Objective-C:</h4>

<p>Rule-1: If you get/create the object from <code>new</code>, <code>alloc</code> or <code>copy</code>, you must <code>release</code> it when done.</p>

<p>Rule-2: If you get the object any other way, assume that it has been autoreleased. If you want to hold on to this object, send it the <code>retain</code> message.</p>

<p>Rule-3: If you <code>retain</code> an object, you must balance every <code>retain</code> with a <code>release</code>.</p>

<p>Rule-4: Never send the <code>dealloc</code> message to an object directly. Others might be holding references to this object, and if deallocated, they&rsquo;ll be left with pointers to unallocated memory.</p>
]]></content>
  </entry>  
  
</feed>
