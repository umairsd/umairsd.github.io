<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Umair&#39;s Blog</title>
  <link href="https://umairsaeed.com/index.xml" rel="self"/>
  <link href="https://umairsaeed.com/"/>
  <updated>2023-04-17T11:28:21-07:00</updated>
  <id>https://umairsaeed.com/</id>
  <author>
    <name>Umair Saeed</name>
  </author>
  <generator>Hugo -- gohugo.io</generator>
  <entry>
    <title type="html"><![CDATA[Evaluating Software Architecture Styles]]></title>
    <link href="https://umairsaeed.com/evaluating-software-architecture/"/>
    <id>https://umairsaeed.com/evaluating-software-architecture/</id>
    <author>
      <name>Umair Saeed</name>
    </author>
    <published>2023-04-17T11:28:21-07:00</published>
    <updated>2023-04-17T11:28:21-07:00</updated>
    
    <content type="html"><![CDATA[<p>Software architecture is very context-dependent. Factors such as the software application&rsquo;s goals, the development team&rsquo;s size and budget, and business needs play a significant role in the choice of software architecture.</p>
<p>The architecture goals for an early-stage company (i.e., focused on quick prototyping to find product-market fit) are very different from those of a  growth-stage company (rapid growth in the number of users) or a company with a stable base of customers who expect the product to &ldquo;just work.&rdquo;</p>
<p>All architectures come with their strengths and weaknesses, so how best to evaluate various decisions and tradeoffs when analyzing architectural choices? Architectural quality attributes (<em>aka</em> non-functional requirements) are the criteria used to evaluate software architectures and compare them systematically.</p>
<h2 id="architectural-attributes">Architectural Attributes</h2>
<p>There is a large number of <a href="https://en.wikipedia.org/wiki/List_of_system_quality_attributes">quality attributes</a> used to evaluate a system. However, I am going to use the following 11 attributes as I find them the most compelling for evaluating various architectural choices.</p>
<h3 id="deployability">Deployability</h3>
<p>Deployability measures the ease with which software can be allocated to &ldquo;an environment for execution.&rdquo; Moreover, it measures the ease with which the engineering or dev-ops teams can roll back the new deployment in case of issues. Ease means a predictable and acceptable amount of time and effort.</p>
<p>The frequency of deployments, percentage of successful to failed deployments, time per deployment, and the number of issues per deployment are some of the metrics used to measure the deployability attribute.</p>
<h3 id="fault-tolerance">Fault Tolerance</h3>
<p>Fault tolerance is the software&rsquo;s ability to handle error and boundary conditions and the time to recovery in failures (e.g., power outage, hardware failure, etc.)</p>
<h3 id="scalability">Scalability</h3>
<p>Scalability is an application&rsquo;s ability to handle a large number of concurrent users without significant performance degradation.</p>
<h3 id="elasticity">Elasticity</h3>
<p>Elasticity is an application&rsquo;s ability to handle a sudden spike of requests. Usually, this attribute correlates with scalability. If an application is architected such that it can scale well, it will likely be able to handle a burst of users as well.</p>
<h3 id="reliability">Reliability</h3>
<p>The reliability attribute measures the degree to which a software system performs specific functions under certain conditions. A few factors contribute to this, such as:</p>
<ul>
<li>Is the software available when the users need to use it?</li>
<li>Does the software do what it is supposed to? How buggy is it?</li>
<li>How well does the software handle external failures, such as hardware or software issues? This factor has some overlap with fault tolerance.</li>
</ul>
<h3 id="performance">Performance</h3>
<p>Performance is a measure of the responsiveness of the system. How long does it take to complete a task (e.g., a user request)? Typically, this attribute includes both the latency (time spent on responding to an event) and capacity (the number of events handled in a given time).</p>
<h3 id="modularity">Modularity</h3>
<p>A software module is a logical grouping of related code. In software architecture, a module is a general term to denote a related collection of code that is independently deployable, reusable, and provides a concise and standardized interface (API) to its users.</p>
<p>Modularity measures how well the overall system is built out of modules.</p>
<h3 id="extensibility">Extensibility</h3>
<p>The extensibility attribute measures how easy it is to change the functionality of a software application. Shifts in business priorities, customer demands, and new technologies often necessitate changing a software application.</p>
<h3 id="testability">Testability</h3>
<p>Testability measures how easy it is to test an application to find bugs and to ensure that it meets all the criteria (i.e., &ldquo;Does the software work? How well?&rdquo;). One way to measure testability is through code and path coverage tools.</p>
<h3 id="simplicity">Simplicity</h3>
<p>Simplicity measures how easy it is to understand and build a software system. It is <em>somewhat</em> subjective, as it often depends on the development team&rsquo;s experience, skills, and budget.</p>
<h3 id="overall-cost">Overall Cost</h3>
<p>Finally, at a high level, the cost is the monetary expense of building and maintaining an architecture. It includes the time to build the system, the resources (hardware, licenses, etc.), and the costs of employing a team of engineers.</p>
<p>&ndash;</p>
<p><strong>This is the first post in a new series of blog posts to analyze some common software architectures</strong>. The primary goal is to provide a high-level overview of each architectural style and see how they stack against each other. I will use the set of architectural characteristics defined in the post to analyze each of the architectures in turn.</p>]]></content>
    
  </entry>
  <entry>
    <title type="html"><![CDATA[Mastodon]]></title>
    <link href="https://umairsaeed.com/mastodon/"/>
    <id>https://umairsaeed.com/mastodon/</id>
    <author>
      <name>Umair Saeed</name>
    </author>
    <published>2023-03-30T12:45:07-07:00</published>
    <updated>2023-03-30T12:45:07-07:00</updated>
    
    <content type="html"><![CDATA[<p>I&rsquo;ve started using 
  <a rel="me" href="https://mastodon.social/@umairsd">Mastodon</a>

, so please feel free to follow.</p>
<p>This could have been a tweet, but I need to add this post to be able to link back to my Mastodon profile. Doing so allows me to verify ownership of the link to my blog on my Mastodon profile.</p>
]]></content>
    
  </entry>
  <entry>
    <title type="html"><![CDATA[Turtles All the Way Down]]></title>
    <link href="https://umairsaeed.com/turtles-all-the-way-down/"/>
    <id>https://umairsaeed.com/turtles-all-the-way-down/</id>
    <author>
      <name>Umair Saeed</name>
    </author>
    <published>2023-03-20T13:46:15-07:00</published>
    <updated>2023-03-20T13:46:15-07:00</updated>
    
    <content type="html"><![CDATA[<p>A friend of mine shared the post <a href="https://brandur.org/fragments/meta-layoffs">Meta Layoffs</a> by <a href="https://twitter.com/brandur">@Brandur</a> with me. I agree everything in the post.</p>
<p>Here, I want to focus and expand on the point about Meta&rsquo;s desire to &ldquo;flatten the company&rsquo;s structure.&rdquo;</p>
<p>This quote from @Brandur&rsquo;s post is pure gold, and is in line with my personal experience as well:</p>
<blockquote>
<p>&ldquo;&hellip;managers who by design had no function in the R&amp;D org at all – they didn&rsquo;t do product work, they didn&rsquo;t do operations or hold a pager, they didn&rsquo;t help with incoming cross-team asks, they didn&rsquo;t manage the JIRA board, and a lot of the time they didn&rsquo;t even run our meetings (deferring that to ICs); and the prevailing wisdom became that this was a good thing.&rdquo;</p>
</blockquote>
<p>In my experience, the deep layers of management are inevitable at FAANG and their copycats. It all boils down to incentives<sup id="fnref:1"><a href="#fn:1" class="footnote-ref" role="doc-noteref">1</a></sup> related to the promotion to the next levels. There are a couple of factors at play here.</p>
<p>The first is that managers need to show team growth to rise higher. It means a manager needs to have other managers report to them to become a senior manager. Similarly, a director needs to increase the number of senior managers reporting to them, and so on. The need to keep expanding the organization&rsquo;s size to get promoted means there is a direct incentive for managers to add yet more layers of managers!</p>
<p>The second factor is subtle, yet nearly as bad. Getting promoted is the only way to demonstrate growth as an engineer. Even if one is comfortable at the current level, promotion is the only way to earn more money.</p>
<p>A key component of being promo-worthy is to demonstrate leadership. The trouble is that <em>technical leadership</em> is hard to measure and quantify. Moreover, one needs a certain amount of technical ability to identify technical leadership in others, which handicaps many managers, especially those who&rsquo;ve been managers for many years.</p>
<p>To solve this, many companies and managers look for proxies for technical leadership, ending up with more focus on leadership and a lesser emphasis on the technical aspects. ICs start focusing more on tasks such as project planning, managing task assignments and timelines for the project, managing backlogs, coordinating cross-functionally, etc. All of these used to be done by managers.</p>
<p>Taking this further, ICs have a deep incentive to become <em>Technical Leads</em>. After all, what better way to show leadership than to have the word <em>lead</em> in your title! Over time, TLs become TLs of other TLs and spend more time on &ldquo;managing&rdquo; rather than hands-on IC tasks, thus becoming yet another layer of de-facto management. The most ironic part is that I have yet to meet a TL who doesn&rsquo;t grumble about this. What are the managers doing if the TLs are doing the managing?</p>
<p>&ndash;</p>
<p>These two factors have massively contributed to organizations having a broad layer of managers. We ended up in situations (from a friend&rsquo;s company) with a reporting chain of 3 directors with the same title. This is the surest real-world example of &ldquo;Turtles all the way down&rdquo;<sup id="fnref:2"><a href="#fn:2" class="footnote-ref" role="doc-noteref">2</a></sup> that I&rsquo;ve ever seen.</p>
<p>As demonstrated by Meta&rsquo;s announcement, we&rsquo;re beginning to see a reset as an industry. Many companies copy practices from Meta and Alphabet, so the idea of flattening the management structures is likely to spread.</p>
<div class="footnotes" role="doc-endnotes">
<hr>
<ol>
<li id="fn:1">
<p>A quote attributed to <em>Charlie Munger</em>, &ldquo;Show me the incentives, and I will show you the outcome.&rdquo;&#160;<a href="#fnref:1" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:2">
<p><em>A Western traveler encountering an Oriental philosopher asks him to describe the nature of the world: &ldquo;It is a great ball resting on the flat back of the world turtle.&rdquo; &ldquo;Ah yes, but what does the world turtle stand on?&rdquo; &ldquo;On the back of a still larger turtle.&rdquo; &ldquo;Yes, but what does he stand on?&rdquo; &ldquo;A very perceptive question. But it&rsquo;s no use, mister; it&rsquo;s turtles all the way down.&rdquo;</em> – from <a href="https://en.wikiquote.org/wiki/Turtles_all_the_way_down">Turtles all the way down</a>&#160;<a href="#fnref:2" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
</ol>
</div>]]></content>
    
  </entry>
  <entry>
    <title type="html"><![CDATA[How to Lose Trust as a Manager]]></title>
    <link href="https://umairsaeed.com/lose-trust-as-a-manager/"/>
    <id>https://umairsaeed.com/lose-trust-as-a-manager/</id>
    <author>
      <name>Umair Saeed</name>
    </author>
    <published>2023-03-07T10:52:40-08:00</published>
    <updated>2023-03-07T10:52:40-08:00</updated>
    
    <content type="html"><![CDATA[<p>A lot of deliberate effort goes into becoming a good manager. Yet, even good managers can lose their direct reports&rsquo; trust through (often) subtle habits and behaviors. Based on my experience, here are a few important ones.</p>
<h2 id="blindsiding">Blindsiding</h2>
<p>Nothing kills trust faster between a manager and a direct report than blindsiding on performance feedback. A manager who keeps telling you, &ldquo;everything is great, keep doing what you are doing,&rdquo; yet on review time, they point out things that they expected you to do differently six months ago! This is the least subtle of all the behaviors in this post.</p>
<p>Blindsiding is the killer blow to trust and a cardinal sin of poor communication. Whatever the cause, recovering from this breach of trust is extremely hard. As a direct report, this leads to constant questioning and second-guessing, making it hard to take anything said by the manager at face value.</p>
<h2 id="bad-mouthing-folks-behind-their-back">Bad-mouthing folks behind their back</h2>
<p>As a manager, you are talking to a team member with whom you have a good rapport. You are frustrated with a colleague or team member. Venting might be OK (though questionable), but bad-mouthing is undoubtedly wrong! Managers may disagree with a colleague&rsquo;s decisions, but they must avoid putting down their skills or ability. This trait becomes even more egregious if the direct employee has seen the manager publicly banter, praise, and nod along with this colleague.</p>
<p>This behavior leads to downstream effects that erode trust. Consider that the direct report has seen the manager be effusive about a colleague in public yet completely trample them in private.
It is natural for the direct report to wonder whether the manager also bad-mouths them in their absence. Or whether the manager questions their abilities in front of other colleagues behind their back. Even if the relationship between the employee and the direct manager is excellent, what happens when there are future disagreements?</p>
<h2 id="we-when-things-are-going-well-you-when-not">&ldquo;We&rdquo; when things are going well, &ldquo;you&rdquo; when not</h2>
<p>Another way to lose trust as a manager is to pretend that you are a team when attempting to solve a problem, yet the direct report is at fault at the first sign of trouble.</p>
<p><em>We</em> (the direct report and the manager) are <em>together</em> trying to solve a complex problem with no obvious solution. Naturally, it might require multiple iterations, and the first attempt is not guaranteed to succeed. This working model is expected and is how complex issues are generally untangled. However, it is a terrible look if the manager distances themselves at the first sign of the approach not working, throwing their direct report under the bus.</p>
<p>This backstabbing makes it hard to trust the manager for future risky endeavors.</p>
<h2 id="distracted-1x1s">Distracted 1x1s</h2>
<p>When a manager frequently gets distracted in the middle of 1-on-1s, they signal that the employee is less valuable than whatever email, slack message, notification, etc., happens to arrive at their screen.</p>
<p>We all get distracted once in a while. I get it. The frequency is what makes it a serious issue.</p>
<h2 id="favoritism">Favoritism</h2>
<p>Another way to lose trust is to show arbitrary favoritism towards some direct reports at the cost of others. Two examples of how such behavior can show up:</p>
<ul>
<li>Treating the same suggestion made by two direct reports differently based on who is part of the &ldquo;in&rdquo; group.</li>
<li>Arbitrarily re-assigning a project championed and started by one direct report to another without any clear rationale or justification.</li>
</ul>
<p>The lack of consistency and transparency leads to the team being unable to trust the manager, leading to resentment.</p>
<p>&ndash;</p>
<p>Collectively, the above behaviors lead to fragmenting trust and team morale. Direct reports not part of the &ldquo;in&rdquo; group feel excluded, and the manager implicitly hampers their career growth. In my experience, managers who recognize and actively avoid these behaviors go a long way toward cultivating trust with their direct reports.</p>]]></content>
    
  </entry>
  <entry>
    <title type="html"><![CDATA[Favorite Books in 2022]]></title>
    <link href="https://umairsaeed.com/favorite-books-in-2022/"/>
    <id>https://umairsaeed.com/favorite-books-in-2022/</id>
    <author>
      <name>Umair Saeed</name>
    </author>
    <published>2023-02-11T12:42:18-08:00</published>
    <updated>2023-02-11T12:42:18-08:00</updated>
    
    <content type="html"><![CDATA[<p>How is it February already?! Going with the mantra of &ldquo;better late than never&rdquo;, here are some of my favorite books from 2022.</p>
<p>I read <a href="https://www.goodreads.com/user_challenges/31586883">59 books in 2022</a>, which is in line with my recent trend of reading around 60 books per year. In the previous four years, I&rsquo;ve read <a href="https://www.goodreads.com/user_challenges/25336627">61</a>, <a href="https://www.goodreads.com/user_challenges/19560079">73</a>, <a href="https://www.goodreads.com/user_challenges/15055253">100</a>, and <a href="https://www.goodreads.com/user_challenges/10278563">94</a> books, respectively. 2018 and 2019 were amazingly productive in this respect. It is an open question for me to figure out the reasons and replicate them going forwards.</p>
<p>Here are some of my favorite books:</p>
<h3 id="non-fiction">Non-Fiction</h3>
<p><a href="https://www.goodreads.com/book/show/22085568-the-culture-map">The Culture Map: Breaking Through the Invisible Boundaries of Global Business, <em>by Erin Meyer</em></a> One of the most impactful books I read in 2022. Anyone who is multi-cultural or works in a multi-cultural work environment must read this book. The book examines how our cultural backgrounds impact our behavior in business environments. Great read!</p>
<p><a href="https://www.goodreads.com/book/show/60097435-quit">Quit: The Power of Knowing When to Walk Away, <em>by Annie Duke</em></a> Another highly impactful book for me last year. I loved the framework of using the &ldquo;expected value&rdquo; as a guide every time I decide on continuing versus quitting. Another new-to-me perspective was how grit could lead us astray as it pushes us to continue sub-optimal endeavors.</p>
<p><a href="https://www.goodreads.com/book/show/25666050-algorithms-to-live-by">Algorithms to Live By: The Computer Science of Human Decisions, <em>by Brian Christian and Tom Griffiths</em></a> This book has been on my reading list for a few years. I&rsquo;m glad I finally got the chance to read it. As a software engineer, I was familiar with most algorithms, yet I still found the coverage insightful. All the algorithms presented in the book are valuable strategies applicable to our daily lives. For instance, I never thought of going to a new restaurant as an explore vs. exploit problem, yet now this is the default way I think about such decisions.</p>
<p><a href="https://www.goodreads.com/book/show/56481725-staff-engineer">Staff Engineer: Leadership Beyond the Management Track, <em>by Will Larson</em></a> The Staff+ engineer&rsquo;s role has a different flavor in every company I&rsquo;ve worked at. In most cases, the responsibilities are not defined explicitly, making it even more challenging (especially for new hires). This book is a good overview of the various flavors of the Staff Engineer role. The second half of the book is a set of interviews with other Staff+ engineers across multiple companies, which is a valuable set of benchmarks for other Staff+ engineers.</p>
<p><a href="https://www.goodreads.com/book/show/18668059-the-obstacle-is-the-way">The Obstacle Is the Way: The Timeless Art of Turning Trials into Triumph, <em>by Ryan Holiday</em></a> A good reminder of the Stoic philosophy. Everyone will have to deal with some problem at one point or another. However, two different mindsets to confronting the same problem (i.e., becoming overwhelmed or striving to find workarounds or alternate approaches) often lead to predictable but vastly different results. The audible narration by the author was perfect.</p>
<h3 id="fiction">Fiction</h3>
<p><a href="https://www.goodreads.com/book/show/58885796-the-last-white-man">The Last White Man, <em>by Mohsin Hamid</em></a> Everything by Mohsin Hamid is a must-read, and this book does not disappoint. It tackles complex topics like racism and the metamorphosis of society. However, the relationship in the book between a father and his changing son is particularly touching. This relationship was a vital part of the book for me, and the author handled this beautifully. Mohsin&rsquo;s writing style is incredibly fluid and poetry-like, which makes this an easy favorite.</p>
<p><a href="https://www.goodreads.com/series/40910-the-mistborn-saga">The Mistborn Saga, <em>by Brandon Sanderson</em></a> I&rsquo;m cheating here a little bit, as this entry includes the nearly half a dozen books in the series (all of them are great!). My son started this series, and I decided to re-read it with him. This series is one of my all-time favorites, so I enjoyed revisiting this universe. I highly recommend this to fans of fantasy who have yet to read this series.</p>
<p><a href="https://www.goodreads.com/book/show/57094295-termination-shock">Termination Shock, <em>by Neal Stephenson</em></a> Neal&rsquo;s work is incredibly well-researched, and I always learn something new when reading his books. Technically, this book is science-fiction, yet it is closer to scientific fact. Some of the technological ideas in the book are already becoming real in 2023.</p>
<p><a href="https://www.goodreads.com/book/show/50202953-piranesi">Piranesi, <em>by Susanna Clarke</em></a> The book starts very slowly, and as a reader, it takes a while to make sense of the environment. However, the reader is amply rewarded for their patience in the book&rsquo;s first half, as Susanna progressively reveals the universe and the layers of the story. Overall, a fascinating premise that&rsquo;s executed well.</p>
<p><a href="https://www.goodreads.com/book/show/50623864-the-invisible-life-of-addie-larue">The Invisible Life of Addie LaRue, <em>by V.E. Schwab</em></a> Beautiful writing and the story of a Faustian bargain spread over several centuries. The story has a romantic subplot, but I wouldn&rsquo;t call it a romance novel.</p>
<hr>]]></content>
    
  </entry>
  <entry>
    <title type="html"><![CDATA[Favorite Books in 2021]]></title>
    <link href="https://umairsaeed.com/favorite-books-in-2021/"/>
    <id>https://umairsaeed.com/favorite-books-in-2021/</id>
    <author>
      <name>Umair Saeed</name>
    </author>
    <published>2022-01-01T10:23:26-08:00</published>
    <updated>2022-01-01T10:23:26-08:00</updated>
    
    <content type="html"><![CDATA[<p>Now that we are done with 2021, it is time to list some of my favorite books from last year.</p>
<p>Overall, 2021 was somewhat &ldquo;meh&rdquo; with respect to how much I was able to read. I read <a href="https://www.goodreads.com/user_challenges/25336627">61</a> books, which is quite a bit lower from previous years (<a href="https://www.goodreads.com/user_challenges/19560079">73</a>, <a href="https://www.goodreads.com/user_challenges/15055253">100</a>, <a href="https://www.goodreads.com/user_challenges/10278563">94</a>). In addition, I wasn&rsquo;t able to read as much non-fiction as I wanted. Hopefully 2022 turns out to be a better year.</p>
<p>Here are some of my favorite books:</p>
<h3 id="fiction">Fiction</h3>
<p><a href="https://www.amazon.com/Project-Hail-Mary-Andy-Weir/dp/0593135202">Project Hail Mary, <em>by Andy Weir</em></a> A very interesting and fun read. Almost as good as <em>The Martian</em> (which is one of my all time favorites). A high school teacher wakes up in a star system with no knowledge of how he got there. He can&rsquo;t remember his name nor the nature of his mission. The story is about he uses his wits, science, and engineering to save the day.</p>
<p><a href="https://www.goodreads.com/book/show/45754981-the-glass-hotel">The Glass Hotel, <em>by Emily St. John Mandel</em></a> Another book by an author who wrote one of my favorite books, <em>Station Eleven</em>. In a similar style, <em>The Glass Hotel</em> starts with several disparate stories and ties them all together in a beautiful and amazing web. I listened to the audiobook narration, and <a href="https://www.audible.com/pd/The-Glass-Hotel-Audiobook/0525596682">Dylan Moore</a> does an amazing job bringing the story to life with her voice.</p>
<p><a href="https://www.goodreads.com/book/show/156785.Diaspora">Diaspora, <em>by Greg Egan</em></a> This is my first <em>Greg Egan</em> book, and wow. Hard Sci-Fi through and through, and one of the densest books that I&rsquo;ve read. The author invented new branches of physics for the story-telling, and at times I barely understood big chunks of it. The book and its ideas were really interested though, and I look forward to reading more of <em>Greg</em>&rsquo;s books.</p>
<p><a href="https://www.goodreads.com/book/show/51807232-troubled-blood">Troubled Blood, <em>by Robert Galbraith</em></a> Ever since I read <em>Agatha Christie</em> as a kid, I have a penchant for British crime thrillers. This was the fifth book in the <em>Cormoran Strike</em> series and at 947 pages, was the longest book I read this year. However, I was so engrossed in the story that I barely noticed the length. I continue to dig the novels written by <em>Robert Galbraith</em> (pen-name used by <em>J. K. Rowling</em>), and look forward to the next one in the series.</p>
<p><a href="https://www.goodreads.com/book/show/45422268-the-vanished-birds">The Vanished Birds, <em>by Simon Jimenez</em></a> I started it based on a friend&rsquo;s recommendation and wasn&rsquo;t disappointed. A beautifully written Sci-Fi book that deals with the relationships and connections between people across time and space.</p>
<h3 id="non-fiction">Non-Fiction</h3>
<p><a href="https://www.goodreads.com/book/show/23848190-extreme-ownership">Extreme Ownership: How U.S. Navy SEALs Lead and Win, <em>by Jocko Willink</em></a> This book had been on my to-read list for a long time, and came highly recommended from many sources. Amazing book, and I regret not reading it sooner. Clear and easy to read, with key lessons that stayed with me and helped me become a better leader.</p>
<p><a href="https://www.goodreads.com/book/show/54968118-the-code-breaker">The Code Breaker: Jennifer Doudna, Gene Editing, and the Future of the Human Race, <em>by Walter Isaacson</em></a> As soon as I found out that Walter Isaacson was writing his next book about Jennifer Doudna, I had to immediately preorder the book. I wasn&rsquo;t disappointed. The book tells <em>Doudna</em>&rsquo;s life story, and simultaneously tells the story of discovery of CRISPR. Like many nobel-winning disoveries, the story had its share of intrigue and rivalry.</p>
<p><a href="https://www.goodreads.com/book/show/55723020-dopamine-nation">Dopamine Nation: Finding Balance in the Age of Indulgence, <em>by Anna Lembke</em></a> Eye-opening book that goes into details of how much the world around us is built to provide access to high-dopamine stimuli (which lead to additions), and what we can do about it. For instance, I highly recommend pairing this book with the <a href="https://www.youtube.com/watch?v=QmOF0crdyRU">Dopamine Masterclass</a> podcast by <em>Andrew Huberman</em>.</p>
<p><a href="https://www.goodreads.com/book/show/58188742-how-to-live">How to Live: 27 Conflicting Answers and One Weird Conclusion, <em>by Derek Sivers</em></a> Thought provoking. The book provides several perspectives on how to live, and opens your mind to various possibilities that we tend to ignore in our day-to-day. I found it helpful as it let me take a step back and consider different possibilities from my trajectory.</p>
<p><a href="https://www.goodreads.com/book/show/52908942-how-to-avoid-a-climate-disaster">How to Avoid a Climate Disaster, <em>by Bill Gates</em></a> This book distills what Bill has learned in more than a decade of studying climate change and investing in innovations. While there may be better books that describe the science of Climate change, this book does a great job at breaking Climate Change into several different causes (backed by data), with concrete actions that we could do to address each cause.</p>]]></content>
    
  </entry>
  <entry>
    <title type="html"><![CDATA[Refresh - 2022]]></title>
    <link href="https://umairsaeed.com/refresh-2022/"/>
    <id>https://umairsaeed.com/refresh-2022/</id>
    <author>
      <name>Umair Saeed</name>
    </author>
    <published>2021-12-28T10:20:16-08:00</published>
    <updated>2021-12-28T10:20:16-08:00</updated>
    
    <content type="html"><![CDATA[<p>After a fairly long hiatus, I am hoping to resume blogging in 2022. This is a test post to ensure that all the tooling (Hugo, my theme etc.) works as expected.</p>
<p>Time to hit refresh!</p>
]]></content>
    
  </entry>
  <entry>
    <title type="html"><![CDATA[Do You Need Self Discipline To Have Fun?]]></title>
    <link href="https://umairsaeed.com/do-you-need-self-discipline-to-have-fun/"/>
    <id>https://umairsaeed.com/do-you-need-self-discipline-to-have-fun/</id>
    <author>
      <name>Umair Saeed</name>
    </author>
    <published>2017-07-03T07:08:05-07:00</published>
    <updated>2017-07-03T07:08:05-07:00</updated>
    
    <content type="html"><![CDATA[<p>I can relate to <a href="https://www.scotthyoung.com/blog/2017/06/19/discipline-and-fun/">this excellent post</a> by Scott Young, where he makes the case that ease of doing an activity and its enjoyment aren&rsquo;t the same. Consider:</p>
<blockquote>
<p>Sometimes I’ll see that movie X is award-winning, has 95%+ on Rotten Tomatoes and rave reviews. But it looks like a difficult movie, so I opt for something more poorly reviewed and trashy. However, if I think back over my experience of movie-watching, movies of the first type I almost always enjoy while movies of the latter type I often regret watching.</p>
</blockquote>
<p>This above example is something that I&rsquo;ve done myself, with the same outcome as Scott&rsquo;s i.e. I end up regret watching a movie that has poorer reviews but was &ldquo;easier&rdquo; to watch. He goes on to say:</p>
<blockquote>
<p>while pleasure-seeking and pain-avoidance are powerful human motives, they aren’t the only ones. Seeking cognitive and physical ease is sometimes a more powerful one, and it can override the desire for a more enjoyable option, if that option is perceived as being more “difficult” in some way.</p>
</blockquote>]]></content>
    
  </entry>
  <entry>
    <title type="html"><![CDATA[Applicative Laws for `((-&gt;) r)` Type]]></title>
    <link href="https://umairsaeed.com/applicative-laws-for-function-type/"/>
    <id>https://umairsaeed.com/applicative-laws-for-function-type/</id>
    <author>
      <name>Umair Saeed</name>
    </author>
    <published>2016-01-07T00:00:00+00:00</published>
    <updated>2016-01-07T00:00:00+00:00</updated>
    
    <content type="html"><![CDATA[<p>Haskell&rsquo;s function type <code>((-&gt;) r)</code> is an Applicative functor. Similar to the previous two posts in this series, in this post I will verify that the applicative laws hold for the <code>((-&gt;) r)</code> type.</p>
<p><em>This is Part-3 of my series on verifying Applicative laws for various Haskell types. Here are Part-1 <a href="http://umairsaeed.com/blog/2016/01/05/applicative-laws-for-maybe-type/" title="Applicative Laws for Maybe Type">Applicative Laws for Maybe Type</a> and Part-2 <a href="http://umairsaeed.com/blog/2016/01/06/applicative-laws-for-list-type/" title="Applicative Laws for List Type">Applicative Laws for [] Type</a></em></p>
<p>For reference, <code>((-&gt;) r)</code> is made an instance of the <code>Applicative</code> class as:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-haskell" data-lang="haskell"><span style="display:flex;"><span><span style="color:#66d9ef">instance</span> <span style="color:#66d9ef">Applicative</span> ((<span style="color:#f92672">-&gt;</span>) r) <span style="color:#66d9ef">where</span>
</span></span><span style="display:flex;"><span>    pure x <span style="color:#f92672">=</span> (<span style="color:#a6e22e">\</span><span style="color:#66d9ef">_</span> <span style="color:#f92672">-&gt;</span> x)
</span></span><span style="display:flex;"><span>    <span style="color:#75715e">-- pure can also be written as:</span>
</span></span><span style="display:flex;"><span>    <span style="color:#75715e">-- pure x = const x</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#75715e">-- (&lt;*&gt;) :: f (a-&gt;b) -&gt; f a -&gt; f b</span>
</span></span><span style="display:flex;"><span>    <span style="color:#75715e">-- (&lt;*&gt;) :: ((-&gt;) r (a-&gt;b)) -&gt; ((-&gt;) r a) -&gt; ((-&gt;) r b)</span>
</span></span><span style="display:flex;"><span>    <span style="color:#75715e">-- (&lt;*&gt;) :: (r -&gt; (a-&gt;b)) -&gt; (r -&gt; a) -&gt; (r -&gt; b)</span>
</span></span><span style="display:flex;"><span>    <span style="color:#75715e">-- the entire lambda has type r -&gt; b, which implies x :: r</span>
</span></span><span style="display:flex;"><span>    (<span style="color:#f92672">&lt;*&gt;</span>) f g <span style="color:#f92672">=</span> (<span style="color:#a6e22e">\</span>x <span style="color:#f92672">-&gt;</span> f x (g x))
</span></span></code></pre></div><p>For review, here are the applicative laws:</p>
<ul>
<li>
<p>Identity: <code>pure id &lt;*&gt; v = v</code></p>
</li>
<li>
<p>Homomorphism: <code>pure f &lt;*&gt; pure x = pure (f x)</code></p>
</li>
<li>
<p>Interchange: <code>u &lt;*&gt; pure y = pure ($y) &lt;*&gt; u</code></p>
</li>
<li>
<p>Composition: <code>pure (.) &lt;*&gt; u &lt;*&gt; v &lt;*&gt; w = u &lt;*&gt; (v &lt;*&gt; w)</code></p>
</li>
</ul>
<h2 id="identity">Identity</h2>
<p>We need to prove that the following holds for the <code>((-&gt;) r)</code> type:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-haskell" data-lang="haskell"><span style="display:flex;"><span><span style="color:#a6e22e">pure</span> id <span style="color:#f92672">&lt;*&gt;</span> v <span style="color:#f92672">=</span> v
</span></span></code></pre></div><p>Beginning from LHS:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-haskell" data-lang="haskell"><span style="display:flex;"><span><span style="color:#a6e22e">pure</span> (id) <span style="color:#f92672">&lt;*&gt;</span> v
</span></span><span style="display:flex;"><span><span style="color:#75715e">-- using definition of pure</span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">const</span> id <span style="color:#f92672">&lt;*&gt;</span> v
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">-- applying definition of &lt;*&gt;</span>
</span></span><span style="display:flex;"><span>(<span style="color:#a6e22e">\</span>x <span style="color:#f92672">-&gt;</span> const id x (v x))
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">-- applying const</span>
</span></span><span style="display:flex;"><span>(<span style="color:#a6e22e">\</span>x <span style="color:#f92672">-&gt;</span> id (v x))
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">-- applying id</span>
</span></span><span style="display:flex;"><span>(<span style="color:#a6e22e">\</span>x <span style="color:#f92672">-&gt;</span> v x)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">v</span> <span style="color:#75715e">-- RHS</span>
</span></span></code></pre></div><h2 id="homomorphism">Homomorphism</h2>
<p>The law&rsquo;s statement is:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-haskell" data-lang="haskell"><span style="display:flex;"><span><span style="color:#a6e22e">pure</span> f <span style="color:#f92672">&lt;*&gt;</span> pure x <span style="color:#f92672">=</span> pure (f x)
</span></span></code></pre></div><p>Here&rsquo;s the proof:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-haskell" data-lang="haskell"><span style="display:flex;"><span><span style="color:#a6e22e">pure</span> f <span style="color:#f92672">&lt;*&gt;</span> pure x
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">-- applying definition of pure</span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">const</span> f <span style="color:#f92672">&lt;*&gt;</span> const x
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">-- applying definition of &lt;*&gt;</span>
</span></span><span style="display:flex;"><span>(<span style="color:#a6e22e">\</span>y <span style="color:#f92672">-&gt;</span> const f y (const x y))
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">-- applying const</span>
</span></span><span style="display:flex;"><span>(<span style="color:#a6e22e">\</span>y <span style="color:#f92672">-&gt;</span> f (x))
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">-- As y is unused, replace with _</span>
</span></span><span style="display:flex;"><span>(<span style="color:#a6e22e">\</span><span style="color:#66d9ef">_</span> <span style="color:#f92672">-&gt;</span> f x)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">-- un-applying definition of pure</span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">pure</span> (f x) <span style="color:#75715e">-- RHS</span>
</span></span></code></pre></div><h2 id="interchange">Interchange</h2>
<p>The law&rsquo;s statement is:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-haskell" data-lang="haskell"><span style="display:flex;"><span><span style="color:#a6e22e">u</span> <span style="color:#f92672">&lt;*&gt;</span> pure y <span style="color:#f92672">=</span> pure (<span style="color:#f92672">$</span>y) <span style="color:#f92672">&lt;*&gt;</span> u
</span></span></code></pre></div><p>Starting from the LHS:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-haskell" data-lang="haskell"><span style="display:flex;"><span><span style="color:#a6e22e">u</span> <span style="color:#f92672">&lt;*&gt;</span> pure y
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">-- applying definition of pure</span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">u</span> <span style="color:#f92672">&lt;*&gt;</span> const y
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">-- applying definition of &lt;*&gt;</span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">\</span>x <span style="color:#f92672">-&gt;</span> u x (const y x)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">-- applying const</span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">\</span>x <span style="color:#f92672">-&gt;</span> u x (y)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">\</span>x <span style="color:#f92672">-&gt;</span> u x y
</span></span></code></pre></div><p>Now, starting from the RHS:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-haskell" data-lang="haskell"><span style="display:flex;"><span><span style="color:#a6e22e">pure</span> (<span style="color:#f92672">$</span>y) <span style="color:#f92672">&lt;*&gt;</span> u
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">-- applying definition of pure</span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">const</span> (<span style="color:#f92672">$</span>y) <span style="color:#f92672">&lt;*&gt;</span> u
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">-- applying definition of &lt;*&gt;</span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">\</span>x <span style="color:#f92672">-&gt;</span> const (<span style="color:#f92672">$</span>y) x (u x)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">-- applying const</span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">\</span>x <span style="color:#f92672">-&gt;</span> (<span style="color:#f92672">$</span>y) (u x)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">-- applying definition of function application operator ($)</span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">\</span>x <span style="color:#f92672">-&gt;</span> (u x) <span style="color:#f92672">$</span> y
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">\</span>x <span style="color:#f92672">-&gt;</span> u x y
</span></span></code></pre></div><p>As both the left and right sides reduce to the same statement, the interchange law is proved for the <code>((-&gt;) r)</code> type</p>
<h2 id="composition">Composition</h2>
<p>The law&rsquo;s statement is:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-haskell" data-lang="haskell"><span style="display:flex;"><span><span style="color:#a6e22e">pure</span> (<span style="color:#f92672">.</span>) <span style="color:#f92672">&lt;*&gt;</span> u <span style="color:#f92672">&lt;*&gt;</span> v <span style="color:#f92672">&lt;*&gt;</span> w <span style="color:#f92672">=</span> u <span style="color:#f92672">&lt;*&gt;</span> (v <span style="color:#f92672">&lt;*&gt;</span> w)
</span></span></code></pre></div><p>Starting from the <em>right</em> side of the equation:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-haskell" data-lang="haskell"><span style="display:flex;"><span><span style="color:#a6e22e">u</span> <span style="color:#f92672">&lt;*&gt;</span> (v <span style="color:#f92672">&lt;*&gt;</span> w)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">-- applying definition of &lt;*&gt;</span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">u</span> <span style="color:#f92672">&lt;*&gt;</span> ( <span style="color:#a6e22e">\</span>y <span style="color:#f92672">-&gt;</span> v y (w y) )
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">-- applying definition of &lt;*&gt;</span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">\</span>x <span style="color:#f92672">-&gt;</span> u x ( (<span style="color:#a6e22e">\</span>y <span style="color:#f92672">-&gt;</span> v y (w y)) x )
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">-- Apply the lambda ( (\y -&gt; v y (w y)) to its</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">-- argument x, which results in:</span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">\</span>x <span style="color:#f92672">-&gt;</span> u x ( v x (w x)) <span style="color:#75715e">-- (A)</span>
</span></span></code></pre></div><p>In the same manner, let&rsquo;s consider the <em>left</em> side of the equation:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-haskell" data-lang="haskell"><span style="display:flex;"><span><span style="color:#a6e22e">pure</span> (<span style="color:#f92672">.</span>) <span style="color:#f92672">&lt;*&gt;</span> u <span style="color:#f92672">&lt;*&gt;</span> v <span style="color:#f92672">&lt;*&gt;</span> w
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">-- applying definition of pure</span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">const</span> (<span style="color:#f92672">.</span>) <span style="color:#f92672">&lt;*&gt;</span> u <span style="color:#f92672">&lt;*&gt;</span> v <span style="color:#f92672">&lt;*&gt;</span> w
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">-- applying definition of &lt;*&gt; to the 1st two terms</span>
</span></span><span style="display:flex;"><span>(<span style="color:#a6e22e">\</span>f <span style="color:#f92672">-&gt;</span> const (<span style="color:#f92672">.</span>) f (u f)) <span style="color:#f92672">&lt;*&gt;</span> v <span style="color:#f92672">&lt;*&gt;</span> w
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">-- applying const</span>
</span></span><span style="display:flex;"><span>(<span style="color:#a6e22e">\</span>f <span style="color:#f92672">-&gt;</span> (<span style="color:#f92672">.</span>) (u f)) <span style="color:#f92672">&lt;*&gt;</span> v <span style="color:#f92672">&lt;*&gt;</span> w
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">-- applying definition of &lt;*&gt; to the 1st two terms</span>
</span></span><span style="display:flex;"><span>(<span style="color:#a6e22e">\</span>g <span style="color:#f92672">-&gt;</span> (<span style="color:#a6e22e">\</span>f <span style="color:#f92672">-&gt;</span> (<span style="color:#f92672">.</span>) (u f)) g (v g)) <span style="color:#f92672">&lt;*&gt;</span> w
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">-- applying definition of &lt;*&gt;</span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">\</span>x <span style="color:#f92672">-&gt;</span> (<span style="color:#a6e22e">\</span>g <span style="color:#f92672">-&gt;</span> (<span style="color:#a6e22e">\</span>f <span style="color:#f92672">-&gt;</span> (<span style="color:#f92672">.</span>) (u f)) g (v g)) x (w x)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">-- Expanding the lambda (\g -&gt; ...) by applying to x</span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">\</span>x <span style="color:#f92672">-&gt;</span> ((<span style="color:#a6e22e">\</span>f <span style="color:#f92672">-&gt;</span> (<span style="color:#f92672">.</span>) (u f)) x (v x)) (w x)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">-- Expanding the inner lambda (\f -&gt; ...) by applying to x</span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">\</span>x <span style="color:#f92672">-&gt;</span> (( (<span style="color:#f92672">.</span>) (u x)) (v x))  (w x)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">-- Using definition of function composition (.)</span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">\</span>x <span style="color:#f92672">-&gt;</span> ((u x) <span style="color:#f92672">.</span> (v x)) (w x)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">-- Using definition of (.), i.e. f.g x = f (g x)</span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">\</span>x <span style="color:#f92672">-&gt;</span> u x ( v x (w x) ) <span style="color:#75715e">-- (B)</span>
</span></span></code></pre></div><p>(A) &amp; (B) prove that both the left and right side of the composition law for <code>((-&gt;) r)</code> type reduce to the same statement, and thus the law is proved for the function type.</p>
<h2 id="acknowledgements">Acknowledgements</h2>
<p>Thanks to <a href="http://stackoverflow.com/users/791604/daniel-wagner" title="Stack Overflow User - Daniel Wagner">Daniel Wagner</a> who nudged me in the right direction by answering my questions (<a href="http://stackoverflow.com/questions/33829415/applicative-laws-for-the-r-type" title="Applicative Laws for the ((-&gt;) r) type">1</a> and <a href="http://stackoverflow.com/questions/34538754/proving-composition-applicative-law-for-r-type" title="Proving Composition Applicative law for ((-&gt;) r) type">2</a>) on Stack Overflow.</p>]]></content>
    
  </entry>
  <entry>
    <title type="html"><![CDATA[Applicative Laws for `[]` Type]]></title>
    <link href="https://umairsaeed.com/applicative-laws-for-list-type/"/>
    <id>https://umairsaeed.com/applicative-laws-for-list-type/</id>
    <author>
      <name>Umair Saeed</name>
    </author>
    <published>2016-01-06T00:00:00+00:00</published>
    <updated>2016-01-06T00:00:00+00:00</updated>
    
    <content type="html"><![CDATA[<p>Haskell&rsquo;s list type <code>[]</code> is an Applicative functor. Similar to the previous post, this post will verify that the applicative laws hold for the <code>[]</code> type.</p>
<p>This is Part-2 of my series on verifying Applicative laws for various Haskell types. Part-1 is <a href="http://umairsaeed.com/blog/2016/01/05/applicative-laws-for-maybe-type/">Applicative Laws for Maybe Type</a>.</p>
<p>For reference, <code>[]</code> is made an instance of the <code>Applicative</code> class as:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-haskell" data-lang="haskell"><span style="display:flex;"><span><span style="color:#66d9ef">instance</span> <span style="color:#66d9ef">Applicative</span> <span style="color:#66d9ef">[]</span> <span style="color:#66d9ef">where</span>
</span></span><span style="display:flex;"><span>    pure x      <span style="color:#f92672">=</span> [x]
</span></span><span style="display:flex;"><span>    (<span style="color:#f92672">&lt;*&gt;</span>) fs xs <span style="color:#f92672">=</span> [f x <span style="color:#f92672">|</span> f <span style="color:#f92672">&lt;-</span> fs, x <span style="color:#f92672">&lt;-</span> xs]
</span></span></code></pre></div><p>For review, here are the applicative laws:</p>
<ul>
<li>
<p>Identity: <code>pure id &lt;*&gt; v = v</code></p>
</li>
<li>
<p>Homomorphism: <code>pure f &lt;*&gt; pure x = pure (f x)</code></p>
</li>
<li>
<p>Interchange: <code>u &lt;*&gt; pure y = pure ($y) &lt;*&gt; u</code></p>
</li>
<li>
<p>Composition: <code>pure (.) &lt;*&gt; u &lt;*&gt; v &lt;*&gt; w = u &lt;*&gt; (v &lt;*&gt; w)</code></p>
</li>
</ul>
<p>Now, let’s test the Applicative laws for the <code>[]</code> type one by one:</p>
<h2 id="identity">Identity</h2>
<p>We need to prove that the following holds for the <code>[]</code> type:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-haskell" data-lang="haskell"><span style="display:flex;"><span><span style="color:#a6e22e">pure</span> id <span style="color:#f92672">&lt;*&gt;</span> v <span style="color:#f92672">=</span> v
</span></span></code></pre></div><p>Consider the <em>left</em> side of the equation:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-haskell" data-lang="haskell"><span style="display:flex;"><span><span style="color:#a6e22e">pure</span> id <span style="color:#f92672">&lt;*&gt;</span> v
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">-- applying definition of pure for []</span>
</span></span><span style="display:flex;"><span>[id] <span style="color:#f92672">&lt;*&gt;</span> v
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">-- applying definition of &lt;*&gt;</span>
</span></span><span style="display:flex;"><span>[id x <span style="color:#f92672">|</span> x <span style="color:#f92672">&lt;-</span> v]
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">-- applying id</span>
</span></span><span style="display:flex;"><span>[x <span style="color:#f92672">|</span> x <span style="color:#f92672">&lt;-</span> v]
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">-- list comprehension reduces to v</span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">v</span>  <span style="color:#75715e">-- Same as the right side</span>
</span></span></code></pre></div><h2 id="homomorphism">Homomorphism</h2>
<p>The law&rsquo;s statement is:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-haskell" data-lang="haskell"><span style="display:flex;"><span><span style="color:#a6e22e">pure</span> f <span style="color:#f92672">&lt;*&gt;</span> pure x <span style="color:#f92672">=</span> pure (f x)
</span></span></code></pre></div><p>Starting from the <em>left</em> side:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-haskell" data-lang="haskell"><span style="display:flex;"><span><span style="color:#a6e22e">pure</span> f <span style="color:#f92672">&lt;*&gt;</span> pure x
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">-- applying definition of pure</span>
</span></span><span style="display:flex;"><span>[f] <span style="color:#f92672">&lt;*&gt;</span> [x]
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">-- Note that both the lists have one element each. So</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">-- applying the definition of &lt;*&gt;, this reduces to:</span>
</span></span><span style="display:flex;"><span>[f x]
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">-- un-applying pure</span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">pure</span> (f x) <span style="color:#75715e">-- Same as the right side</span>
</span></span></code></pre></div><h2 id="interchange">Interchange</h2>
<p>The law&rsquo;s statement is:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-haskell" data-lang="haskell"><span style="display:flex;"><span><span style="color:#a6e22e">u</span> <span style="color:#f92672">&lt;*&gt;</span> pure y <span style="color:#f92672">=</span> pure (<span style="color:#f92672">$</span>y) <span style="color:#f92672">&lt;*&gt;</span> u
</span></span></code></pre></div><p>Starting from the <em>left</em> side,</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-haskell" data-lang="haskell"><span style="display:flex;"><span><span style="color:#a6e22e">u</span> <span style="color:#f92672">&lt;*&gt;</span> pure y
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">-- applying definition of pure</span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">u</span> <span style="color:#f92672">&lt;*&gt;</span> [y]   <span style="color:#75715e">-- A list of functions applied to</span>
</span></span><span style="display:flex;"><span>            <span style="color:#75715e">-- a single element list</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">-- via definition of &lt;*&gt;</span>
</span></span><span style="display:flex;"><span>[f y <span style="color:#f92672">|</span> f <span style="color:#f92672">&lt;-</span> u]
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">-- replacing f y by the function application operator</span>
</span></span><span style="display:flex;"><span>[f <span style="color:#f92672">$</span> y <span style="color:#f92672">|</span> f <span style="color:#f92672">&lt;-</span> u]
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">-- Using the section representation of the $ infix operator</span>
</span></span><span style="display:flex;"><span>[(<span style="color:#f92672">$</span>y) f <span style="color:#f92672">|</span> f <span style="color:#f92672">&lt;-</span> u]
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">-- Un-applying the definition of &lt;*&gt;</span>
</span></span><span style="display:flex;"><span>[(<span style="color:#f92672">$</span>y)] <span style="color:#f92672">&lt;*&gt;</span> u
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">-- Un-applying pure</span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">pure</span> (<span style="color:#f92672">$</span>y) <span style="color:#f92672">&lt;*&gt;</span> u <span style="color:#75715e">-- Same as the right side</span>
</span></span></code></pre></div><h2 id="composition">Composition</h2>
<p>The law&rsquo;s statement is:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-haskell" data-lang="haskell"><span style="display:flex;"><span><span style="color:#a6e22e">pure</span> (<span style="color:#f92672">.</span>) <span style="color:#f92672">&lt;*&gt;</span> u <span style="color:#f92672">&lt;*&gt;</span> v <span style="color:#f92672">&lt;*&gt;</span> w <span style="color:#f92672">=</span> u <span style="color:#f92672">&lt;*&gt;</span> (v <span style="color:#f92672">&lt;*&gt;</span> w)
</span></span></code></pre></div><p>Starting from the <em>left</em>:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-haskell" data-lang="haskell"><span style="display:flex;"><span><span style="color:#a6e22e">pure</span> (<span style="color:#f92672">.</span>) <span style="color:#f92672">&lt;*&gt;</span> u <span style="color:#f92672">&lt;*&gt;</span> v <span style="color:#f92672">&lt;*&gt;</span> w
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">-- applying definition of pure</span>
</span></span><span style="display:flex;"><span>[(<span style="color:#f92672">.</span>)] <span style="color:#f92672">&lt;*&gt;</span> u <span style="color:#f92672">&lt;*&gt;</span> v <span style="color:#f92672">&lt;*&gt;</span> w
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">-- as u, v, w are all lists, for clarity re-writing</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">-- u as fs, v as gs, w as xs</span>
</span></span><span style="display:flex;"><span>[(<span style="color:#f92672">.</span>)] <span style="color:#f92672">&lt;*&gt;</span> fs <span style="color:#f92672">&lt;*&gt;</span> gs <span style="color:#f92672">&lt;*&gt;</span> xs
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">-- applying definition of &lt;*&gt;</span>
</span></span><span style="display:flex;"><span>[(<span style="color:#f92672">.</span>) f <span style="color:#f92672">|</span> f <span style="color:#f92672">&lt;-</span> fs] <span style="color:#f92672">&lt;*&gt;</span> gs <span style="color:#f92672">&lt;*&gt;</span> xs
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">-- applying definition of &lt;*&gt;</span>
</span></span><span style="display:flex;"><span>[z g <span style="color:#f92672">|</span> z <span style="color:#f92672">&lt;-</span> [(<span style="color:#f92672">.</span>) f <span style="color:#f92672">|</span> f <span style="color:#f92672">&lt;-</span> fs], g <span style="color:#f92672">&lt;-</span> gs] <span style="color:#f92672">&lt;*&gt;</span> xs
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">-- replace the value of z, and reduce</span>
</span></span><span style="display:flex;"><span>[(<span style="color:#f92672">.</span>) f g <span style="color:#f92672">|</span> f <span style="color:#f92672">&lt;-</span> fs, g <span style="color:#f92672">&lt;-</span> gs] <span style="color:#f92672">&lt;*&gt;</span> xs
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">-- applying function composition</span>
</span></span><span style="display:flex;"><span>[f<span style="color:#f92672">.</span>g <span style="color:#f92672">|</span> f <span style="color:#f92672">&lt;-</span> fs, g <span style="color:#f92672">&lt;-</span> gs] <span style="color:#f92672">&lt;*&gt;</span> xs
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">-- applying the definition of &lt;*&gt;</span>
</span></span><span style="display:flex;"><span>[ z x <span style="color:#f92672">|</span> z <span style="color:#f92672">&lt;-</span> [f<span style="color:#f92672">.</span>g <span style="color:#f92672">|</span> f <span style="color:#f92672">&lt;-</span> fs, g <span style="color:#f92672">&lt;-</span> gs],
</span></span><span style="display:flex;"><span>        x <span style="color:#f92672">&lt;-</span> xs]
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>[ f<span style="color:#f92672">.</span>g x <span style="color:#f92672">|</span> f <span style="color:#f92672">&lt;-</span> fs, g <span style="color:#f92672">&lt;-</span> gs, x <span style="color:#f92672">&lt;-</span> xs]
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">-- applying definition of function composition</span>
</span></span><span style="display:flex;"><span>[ f (g x) <span style="color:#f92672">|</span> f <span style="color:#f92672">&lt;-</span> fs, g <span style="color:#f92672">&lt;-</span> gs, x <span style="color:#f92672">&lt;-</span> xs] <span style="color:#75715e">-- (A)</span>
</span></span></code></pre></div><p>In the same manner, let&rsquo;s consider the <em>right</em> side of the equation:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-haskell" data-lang="haskell"><span style="display:flex;"><span><span style="color:#a6e22e">u</span> <span style="color:#f92672">&lt;*&gt;</span> (v <span style="color:#f92672">&lt;*&gt;</span> w)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">-- as u, v, w are all lists, for clarity re-writing</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">-- u as fs, v as gs, w as xs</span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">fs</span> <span style="color:#f92672">&lt;*&gt;</span> (gs <span style="color:#f92672">&lt;*&gt;</span> xs)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">-- applying definition of &lt;*&gt;</span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">fs</span> <span style="color:#f92672">&lt;*&gt;</span> ( [g x <span style="color:#f92672">|</span> g <span style="color:#f92672">&lt;-</span> gs, x <span style="color:#f92672">&lt;-</span> xs] )
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">-- applying definition of &lt;*&gt;</span>
</span></span><span style="display:flex;"><span>[f z <span style="color:#f92672">|</span> f <span style="color:#f92672">&lt;-</span> fs, z <span style="color:#f92672">&lt;-</span> [g x <span style="color:#f92672">|</span> g <span style="color:#f92672">&lt;-</span> gs, x <span style="color:#f92672">&lt;-</span> xs] ]
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">-- replacing z</span>
</span></span><span style="display:flex;"><span>[f (g x) <span style="color:#f92672">|</span> f <span style="color:#f92672">&lt;-</span> fs, g <span style="color:#f92672">&lt;-</span> gs, x <span style="color:#f92672">&lt;-</span> xs] <span style="color:#75715e">-- (B)</span>
</span></span></code></pre></div><p>(A) &amp; (B) prove that both the left and right side of the composition law reduce to the same statement, and thus composition law is proved for the <code>[]</code> type</p>]]></content>
    
  </entry>
  <entry>
    <title type="html"><![CDATA[Applicative Laws for `Maybe` Type]]></title>
    <link href="https://umairsaeed.com/applicative-laws-for-maybe-type/"/>
    <id>https://umairsaeed.com/applicative-laws-for-maybe-type/</id>
    <author>
      <name>Umair Saeed</name>
    </author>
    <published>2016-01-05T00:00:00+00:00</published>
    <updated>2016-01-05T00:00:00+00:00</updated>
    
    <content type="html"><![CDATA[<p>Applicative functors come with a set of laws that apply for all Applicative instances. These laws are as follows:</p>
<ul>
<li>
<p>Identity: <code>pure id &lt;*&gt; v = v</code></p>
</li>
<li>
<p>Homomorphism: <code>pure f &lt;*&gt; pure x = pure (f x)</code></p>
</li>
<li>
<p>Interchange: <code>u &lt;*&gt; pure y = pure ($y) &lt;*&gt; u</code></p>
</li>
<li>
<p>Composition: <code>pure (.) &lt;*&gt; u &lt;*&gt; v &lt;*&gt; w = u &lt;*&gt; (v &lt;*&gt; w)</code></p>
</li>
</ul>
<p>For more information about these laws, check out <a href="https://wiki.haskell.org/Typeclassopedia#Laws_2" title="Applicative Laws">this Haskell wiki post</a>.</p>
<p><code>Maybe</code> is an Applicative functor, and this post will verify that the applicative laws hold for the <code>Maybe</code> instance.</p>
<p>Before we begin, let&rsquo;s review the <a href="https://hackage.haskell.org/package/base-4.8.1.0/docs/Control-Applicative.html" title="Control.Applicative">definition</a> for <code>Applicative</code> type-class:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-haskell" data-lang="haskell"><span style="display:flex;"><span><span style="color:#66d9ef">class</span> <span style="color:#66d9ef">Functor</span> f <span style="color:#f92672">=&gt;</span> <span style="color:#66d9ef">Applicative</span> f <span style="color:#66d9ef">where</span>
</span></span><span style="display:flex;"><span>    pure <span style="color:#f92672">::</span> a <span style="color:#f92672">-&gt;</span> f a
</span></span><span style="display:flex;"><span>    (<span style="color:#f92672">&lt;*&gt;</span>) <span style="color:#f92672">::</span> f (a<span style="color:#f92672">-&gt;</span>b) <span style="color:#f92672">-&gt;</span> f a <span style="color:#f92672">-&gt;</span> f b
</span></span></code></pre></div><p><code>Maybe</code> is made an instance of the <code>Applicative</code> class as:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-haskell" data-lang="haskell"><span style="display:flex;"><span><span style="color:#66d9ef">instance</span> <span style="color:#66d9ef">Applicative</span> <span style="color:#66d9ef">Maybe</span> <span style="color:#66d9ef">where</span>
</span></span><span style="display:flex;"><span>    pure x                   <span style="color:#f92672">=</span> <span style="color:#66d9ef">Just</span> x
</span></span><span style="display:flex;"><span>    (<span style="color:#f92672">&lt;*&gt;</span>) <span style="color:#66d9ef">Nothing</span>  <span style="color:#66d9ef">_</span>         <span style="color:#f92672">=</span> <span style="color:#66d9ef">Nothing</span>
</span></span><span style="display:flex;"><span>    (<span style="color:#f92672">&lt;*&gt;</span>) (<span style="color:#66d9ef">Just</span> f) someMaybe <span style="color:#f92672">=</span> fmap f someMaybe
</span></span></code></pre></div><p>Note that the last line above <a href="http://umairsaeed.com/blog/2015/08/21/maybe-as-an-applicative-functor/" title="Maybe as an Applicative Functor">can be re-written as</a>:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-haskell" data-lang="haskell"><span style="display:flex;"><span>    (<span style="color:#f92672">&lt;*&gt;</span>) (<span style="color:#66d9ef">Just</span> f) <span style="color:#66d9ef">Nothing</span>  <span style="color:#f92672">=</span> <span style="color:#66d9ef">Nothing</span>
</span></span><span style="display:flex;"><span>    (<span style="color:#f92672">&lt;*&gt;</span>) (<span style="color:#66d9ef">Just</span> f) (<span style="color:#66d9ef">Just</span> x) <span style="color:#f92672">=</span> <span style="color:#66d9ef">Just</span> (f x)
</span></span></code></pre></div><p>Now, let&rsquo;s test the Applicative laws for the <code>Maybe</code> type one by one:</p>
<h2 id="identity">Identity</h2>
<p>We need to prove that the following holds for the <code>Maybe</code> type:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-haskell" data-lang="haskell"><span style="display:flex;"><span><span style="color:#a6e22e">pure</span> id <span style="color:#f92672">&lt;*&gt;</span> v <span style="color:#f92672">=</span> v
</span></span></code></pre></div><p>Let&rsquo;s start from the <em>left</em> side of the equation:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-haskell" data-lang="haskell"><span style="display:flex;"><span><span style="color:#a6e22e">pure</span> id <span style="color:#f92672">&lt;*&gt;</span> v
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">-- applying definition of pure for Maybe</span>
</span></span><span style="display:flex;"><span>(<span style="color:#66d9ef">Just</span> id) <span style="color:#f92672">&lt;*&gt;</span> v
</span></span><span style="display:flex;"><span><span style="color:#75715e">-- v could be either Nothing, or (Just x)</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">case</span> v <span style="color:#66d9ef">of</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">Nothing</span>  <span style="color:#f92672">-&gt;</span> <span style="color:#66d9ef">Nothing</span>
</span></span><span style="display:flex;"><span>    (<span style="color:#66d9ef">Just</span> x) <span style="color:#f92672">-&gt;</span> <span style="color:#66d9ef">Just</span> (id x)
</span></span><span style="display:flex;"><span><span style="color:#75715e">-- applying id to x is simply x</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">case</span> v <span style="color:#66d9ef">of</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">Nothing</span>  <span style="color:#f92672">-&gt;</span> <span style="color:#66d9ef">Nothing</span>
</span></span><span style="display:flex;"><span>    (<span style="color:#66d9ef">Just</span> x) <span style="color:#f92672">-&gt;</span> <span style="color:#66d9ef">Just</span> x
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">v</span>  <span style="color:#75715e">-- the right side of equation</span>
</span></span></code></pre></div><h2 id="homomorphism">Homomorphism</h2>
<p>The law&rsquo;s statement is:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-haskell" data-lang="haskell"><span style="display:flex;"><span><span style="color:#a6e22e">pure</span> f <span style="color:#f92672">&lt;*&gt;</span> pure x <span style="color:#f92672">=</span> pure (f x)
</span></span></code></pre></div><p>To prove this for <code>Maybe</code> type, let&rsquo;s begin from the <em>left</em> side of the equation:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-haskell" data-lang="haskell"><span style="display:flex;"><span><span style="color:#a6e22e">pure</span> f <span style="color:#f92672">&lt;*&gt;</span> pure x
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">-- applying definition of pure</span>
</span></span><span style="display:flex;"><span>(<span style="color:#66d9ef">Just</span> f) <span style="color:#f92672">&lt;*&gt;</span> (<span style="color:#66d9ef">Just</span> x)
</span></span><span style="display:flex;"><span><span style="color:#75715e">-- applying defintion of &lt;*&gt;</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">Just</span> (f x)
</span></span><span style="display:flex;"><span><span style="color:#75715e">-- un-applying the definition of pure</span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">pure</span> (f x) <span style="color:#75715e">-- the right side</span>
</span></span></code></pre></div><h2 id="interchange">Interchange</h2>
<p>The law&rsquo;s statement is:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-haskell" data-lang="haskell"><span style="display:flex;"><span><span style="color:#a6e22e">u</span> <span style="color:#f92672">&lt;*&gt;</span> pure y <span style="color:#f92672">=</span> pure (<span style="color:#f92672">$</span>y) <span style="color:#f92672">&lt;*&gt;</span> u
</span></span></code></pre></div><p>Starting from the <em>left</em> side:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-haskell" data-lang="haskell"><span style="display:flex;"><span><span style="color:#a6e22e">u</span> <span style="color:#f92672">&lt;*&gt;</span> pure y
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">-- applying definition of pure</span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">u</span> <span style="color:#f92672">&lt;*&gt;</span> (<span style="color:#66d9ef">Just</span> y)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">-- u can be either Nothing, or (Just f). Let&#39;s evaluate both</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">case</span> u <span style="color:#66d9ef">of</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">Nothing</span>  <span style="color:#f92672">-&gt;</span> <span style="color:#66d9ef">Nothing</span>
</span></span><span style="display:flex;"><span>    (<span style="color:#66d9ef">Just</span> f) <span style="color:#f92672">-&gt;</span> <span style="color:#66d9ef">Just</span> (f y)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">-- re-writing (f y) using function application operator</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">case</span> u <span style="color:#66d9ef">of</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">Nothing</span>  <span style="color:#f92672">-&gt;</span> <span style="color:#66d9ef">Nothing</span>
</span></span><span style="display:flex;"><span>    (<span style="color:#66d9ef">Just</span> f) <span style="color:#f92672">-&gt;</span> <span style="color:#66d9ef">Just</span> (f <span style="color:#f92672">$</span> y)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">-- Using the section representation of the $ infix operator</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">case</span> u <span style="color:#66d9ef">of</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">Nothing</span>  <span style="color:#f92672">-&gt;</span> <span style="color:#66d9ef">Nothing</span>
</span></span><span style="display:flex;"><span>    (<span style="color:#66d9ef">Just</span> f) <span style="color:#f92672">-&gt;</span> <span style="color:#66d9ef">Just</span> ((<span style="color:#f92672">$</span>y) f)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">-- Un-applying the definition of &lt;*&gt;</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">case</span> u <span style="color:#66d9ef">of</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">Nothing</span>  <span style="color:#f92672">-&gt;</span> <span style="color:#66d9ef">Nothing</span>
</span></span><span style="display:flex;"><span>    (<span style="color:#66d9ef">Just</span> f) <span style="color:#f92672">-&gt;</span> <span style="color:#66d9ef">Just</span> (<span style="color:#f92672">$</span>y) <span style="color:#f92672">&lt;*&gt;</span> (<span style="color:#66d9ef">Just</span> f)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">-- Replacing the Nothing clause with an equivalent (via</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">-- the defintion) of &lt;*&gt; for Maybe</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">case</span> u <span style="color:#66d9ef">of</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">Nothing</span>  <span style="color:#f92672">-&gt;</span> <span style="color:#66d9ef">Just</span> (<span style="color:#f92672">$</span>y) <span style="color:#f92672">&lt;*&gt;</span> <span style="color:#66d9ef">Nothing</span>
</span></span><span style="display:flex;"><span>    (<span style="color:#66d9ef">Just</span> f) <span style="color:#f92672">-&gt;</span> <span style="color:#66d9ef">Just</span> (<span style="color:#f92672">$</span>y) <span style="color:#f92672">&lt;*&gt;</span> (<span style="color:#66d9ef">Just</span> f)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">-- Un-applying the definition of pure and u</span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">pure</span> (<span style="color:#f92672">$</span>y) <span style="color:#f92672">&lt;*&gt;</span> u <span style="color:#75715e">-- Equal to the right side</span>
</span></span></code></pre></div><h2 id="composition">Composition</h2>
<p>The law&rsquo;s statement is:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-haskell" data-lang="haskell"><span style="display:flex;"><span><span style="color:#a6e22e">pure</span> (<span style="color:#f92672">.</span>) <span style="color:#f92672">&lt;*&gt;</span> u <span style="color:#f92672">&lt;*&gt;</span> v <span style="color:#f92672">&lt;*&gt;</span> w <span style="color:#f92672">=</span> u <span style="color:#f92672">&lt;*&gt;</span> (v <span style="color:#f92672">&lt;*&gt;</span> w)
</span></span></code></pre></div><p>Starting from the <em>left</em> side:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-haskell" data-lang="haskell"><span style="display:flex;"><span><span style="color:#a6e22e">pure</span> (<span style="color:#f92672">.</span>) <span style="color:#f92672">&lt;*&gt;</span> u <span style="color:#f92672">&lt;*&gt;</span> v <span style="color:#f92672">&lt;*&gt;</span> w
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">-- applying definition of pure</span>
</span></span><span style="display:flex;"><span>(<span style="color:#66d9ef">Just</span> (<span style="color:#f92672">.</span>)) <span style="color:#f92672">&lt;*&gt;</span> u <span style="color:#f92672">&lt;*&gt;</span> v <span style="color:#f92672">&lt;*&gt;</span> w
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">-- u, v &amp; w can all be either Nothing or (Just something).</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">-- From the definition of &lt;*&gt;, we know that if either</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">-- argument to &lt;*&gt; is Nothing, the entire expression reduces</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">-- to Nothing.</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">-- Therefore, I am only going to focus on the Just cases</span>
</span></span><span style="display:flex;"><span>(<span style="color:#66d9ef">Just</span> (<span style="color:#f92672">.</span>)) <span style="color:#f92672">&lt;*&gt;</span> (<span style="color:#66d9ef">Just</span> f) <span style="color:#f92672">&lt;*&gt;</span> (<span style="color:#66d9ef">Just</span> g) <span style="color:#f92672">&lt;*&gt;</span> (<span style="color:#66d9ef">Just</span> x)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">-- Appying &lt;*&gt; to the first two terms</span>
</span></span><span style="display:flex;"><span>(<span style="color:#66d9ef">Just</span> (<span style="color:#f92672">.</span>) f) <span style="color:#f92672">&lt;*&gt;</span> (<span style="color:#66d9ef">Just</span> g) <span style="color:#f92672">&lt;*&gt;</span> (<span style="color:#66d9ef">Just</span> x)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">-- Appying &lt;*&gt; to the first two terms again</span>
</span></span><span style="display:flex;"><span>(<span style="color:#66d9ef">Just</span> (<span style="color:#f92672">.</span>) f g) <span style="color:#f92672">&lt;*&gt;</span> (<span style="color:#66d9ef">Just</span> x)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">-- Applying the function composition</span>
</span></span><span style="display:flex;"><span>(<span style="color:#66d9ef">Just</span> (f<span style="color:#f92672">.</span>g) ) <span style="color:#f92672">&lt;*&gt;</span> (<span style="color:#66d9ef">Just</span> x)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">-- Applying &lt;*&gt; one more time</span>
</span></span><span style="display:flex;"><span>(<span style="color:#66d9ef">Just</span> (f<span style="color:#f92672">.</span>g) x)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">-- via the definition of the function composition</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">-- operator</span>
</span></span><span style="display:flex;"><span>(<span style="color:#66d9ef">Just</span> f (g x))
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">-- Applying Homomorphism law</span>
</span></span><span style="display:flex;"><span>(<span style="color:#66d9ef">Just</span> f) <span style="color:#f92672">&lt;*&gt;</span> <span style="color:#66d9ef">Just</span> (g x)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">-- Applying Homomorphism law to the 2nd term</span>
</span></span><span style="display:flex;"><span>(<span style="color:#66d9ef">Just</span> f) <span style="color:#f92672">&lt;*&gt;</span> ( (<span style="color:#66d9ef">Just</span> g) <span style="color:#f92672">&lt;*&gt;</span> (<span style="color:#66d9ef">Just</span> x) )
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">-- Un-applying the definitions of u, v, w</span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">u</span> <span style="color:#f92672">&lt;*&gt;</span> (v <span style="color:#f92672">&lt;*&gt;</span> w)    <span style="color:#75715e">-- Equal to the right side</span>
</span></span></code></pre></div>]]></content>
    
  </entry>
  <entry>
    <title type="html"><![CDATA[Maybe as an Applicative Functor]]></title>
    <link href="https://umairsaeed.com/maybe-as-an-applicative-functor/"/>
    <id>https://umairsaeed.com/maybe-as-an-applicative-functor/</id>
    <author>
      <name>Umair Saeed</name>
    </author>
    <published>2015-08-21T09:53:20-07:00</published>
    <updated>2015-08-21T09:53:20-07:00</updated>
    
    <content type="html"><![CDATA[<p><code>Maybe</code> type is made an instance of the <code>Applicative</code> type class as follows:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-haskell" data-lang="haskell"><span style="display:flex;"><span><span style="color:#66d9ef">instance</span> <span style="color:#66d9ef">Applicative</span> <span style="color:#66d9ef">Maybe</span> <span style="color:#66d9ef">where</span>
</span></span><span style="display:flex;"><span>    pure <span style="color:#f92672">=</span> <span style="color:#66d9ef">Just</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">Nothing</span> <span style="color:#f92672">&lt;*&gt;</span> <span style="color:#66d9ef">_</span> <span style="color:#f92672">=</span> <span style="color:#66d9ef">Nothing</span>
</span></span><span style="display:flex;"><span>    (<span style="color:#66d9ef">Just</span> f) <span style="color:#f92672">&lt;*&gt;</span> something <span style="color:#f92672">=</span> fmap f something
</span></span></code></pre></div><p>It took me a several attempts before I could parse this definition. I was particularly puzzled by the line <code>(Just f) &lt;*&gt; something = fmap f something</code>. To help me understand this better, I decided to build this definition back up from the very basics.</p>
<p>First, let&rsquo;s look at the <code>Functor</code> type class definition:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-haskell" data-lang="haskell"><span style="display:flex;"><span><span style="color:#66d9ef">class</span> <span style="color:#66d9ef">Functor</span> f <span style="color:#66d9ef">where</span>
</span></span><span style="display:flex;"><span>    fmap <span style="color:#f92672">::</span> (a <span style="color:#f92672">-&gt;</span> b) <span style="color:#f92672">-&gt;</span> f a <span style="color:#f92672">-&gt;</span> f b
</span></span></code></pre></div><p>This means that for a given functor type <code>f</code> (i.e. type that is an instance of the <code>Functor</code> type class), <code>fmap</code> takes a function from <code>a -&gt; b</code> and a functor (box) that contains <code>a</code> and returns a functor (box) that contains <code>b</code>. An intuitive way to think about this is that <code>fmap</code> opens the box containing <code>a</code> and applies the function <code>a -&gt; b</code> to it, which results in <code>b</code>.</p>
<p>Now let&rsquo;s see how <code>Maybe</code> is an instance of the <code>Functor</code> type class:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-haskell" data-lang="haskell"><span style="display:flex;"><span><span style="color:#66d9ef">instance</span> <span style="color:#66d9ef">Functor</span> <span style="color:#66d9ef">Maybe</span> <span style="color:#66d9ef">where</span>
</span></span><span style="display:flex;"><span>    fmap func <span style="color:#66d9ef">Nothing</span>  <span style="color:#f92672">=</span> <span style="color:#66d9ef">Nothing</span>
</span></span><span style="display:flex;"><span>    fmap func (<span style="color:#66d9ef">Just</span> x) <span style="color:#f92672">=</span> <span style="color:#66d9ef">Just</span> (func x)
</span></span></code></pre></div><ul>
<li>Line 2: Applying a function to <code>Nothing</code> results in <code>Nothing</code>.</li>
<li>Line 3: From the definition of the <code>Functor</code> type, we know that the type of <code>func</code> is <code>a -&gt; b</code> and <code>Just x</code> corresponds to <code>f a</code>. Applying the function to <code>x</code> inside the box results in a value of type <code>b</code> in the functor box.</li>
</ul>
<p>Now, let&rsquo;s look at the definition of the <code>Applicative</code> type class:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-haskell" data-lang="haskell"><span style="display:flex;"><span><span style="color:#66d9ef">class</span> (<span style="color:#66d9ef">Functor</span> f) <span style="color:#f92672">=&gt;</span> <span style="color:#66d9ef">Applicative</span> f <span style="color:#66d9ef">where</span>  <span style="color:#75715e">-- 1</span>
</span></span><span style="display:flex;"><span>    pure <span style="color:#f92672">::</span> a <span style="color:#f92672">-&gt;</span> f a                      <span style="color:#75715e">-- 2</span>
</span></span><span style="display:flex;"><span>    (<span style="color:#f92672">&lt;*&gt;</span>) <span style="color:#f92672">::</span> f (a <span style="color:#f92672">-&gt;</span> b) <span style="color:#f92672">-&gt;</span> f a <span style="color:#f92672">-&gt;</span> f b     <span style="color:#75715e">-- 3</span>
</span></span></code></pre></div><p>For a type <code>f</code> that is an instance of the <code>Applicative</code> type class, here is what each line means:</p>
<ol>
<li><code>f</code> must also be a functor (i.e. be an instance of the <code>Functor</code> type class).</li>
<li>The <code>pure</code> function takes an arbitrary type <code>a</code> and brings it into the functor. i.e. <code>pure</code> puts <code>a</code> in a box of type <code>f</code>.</li>
<li><code>&lt;*&gt;</code> takes a functor (box) of type <code>f</code> that contains a function of type <code>a -&gt; b</code>, and a functor (box) of type <code>f</code> that contains type <code>a</code>. It results in a functor (box) of type <code>f</code> that contains <code>b</code>.</li>
</ol>
<p>With the preamble out of the way, let&rsquo;s make <code>Maybe</code>  an instance of the <code>Applicative</code> type class. To do that, I need to implement the <code>pure</code> and <code>&lt;*&gt;</code> methods for the <code>Maybe</code> type. Below is a line-by-line implementation:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-haskell" data-lang="haskell"><span style="display:flex;"><span><span style="color:#66d9ef">instance</span> <span style="color:#66d9ef">Applicative</span> <span style="color:#66d9ef">Maybe</span> <span style="color:#66d9ef">where</span>
</span></span><span style="display:flex;"><span>    pure x <span style="color:#f92672">=</span> <span style="color:#66d9ef">Just</span> x
</span></span></code></pre></div><p>For the <code>Maybe</code> type, <code>pure</code> simply wraps an arbitrary type in <code>Just</code>, thus making it a <code>Maybe</code> value. E.g. writing <code>pure 4 :: Maybe Int</code> in GHCi results in <code>Just 4</code>.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-haskell" data-lang="haskell"><span style="display:flex;"><span>    (<span style="color:#f92672">&lt;*&gt;</span>) <span style="color:#66d9ef">Nothing</span> <span style="color:#66d9ef">_</span> <span style="color:#f92672">=</span> <span style="color:#66d9ef">Nothing</span>
</span></span></code></pre></div><p>Here, <code>Nothing</code> maps to <code>f (a -&gt; b)</code> from the <code>Applicative</code> class definition. We cannot extract a function out of <code>Nothing</code>, so the result will be <code>Nothing</code> regardless of the second argument.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-haskell" data-lang="haskell"><span style="display:flex;"><span>    (<span style="color:#f92672">&lt;*&gt;</span>) (<span style="color:#66d9ef">Just</span> func) <span style="color:#66d9ef">Nothing</span> <span style="color:#f92672">=</span> <span style="color:#66d9ef">Nothing</span>
</span></span></code></pre></div><p>In the line above, <code>(Just func)</code> maps to <code>f (a -&gt; b)</code>, and <code>Nothing</code> maps to <code>f a</code> from the class definition. <code>&lt;*&gt;</code> extracts <code>func</code> out of <code>Just func</code>, and applies it to <code>Nothing</code>. Applying a function to <code>Nothing</code> results in <code>Nothing</code> (or, using the box analogy, applying a function to an empty box results in an empty box)</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-haskell" data-lang="haskell"><span style="display:flex;"><span>    (<span style="color:#f92672">&lt;*&gt;</span>) (<span style="color:#66d9ef">Just</span> func) (<span style="color:#66d9ef">Just</span> x) <span style="color:#f92672">=</span> <span style="color:#66d9ef">Just</span> (func x)
</span></span></code></pre></div><p><code>(Just func)</code> maps to <code>f (a -&gt; b)</code>, and <code>Just x</code> maps to <code>f a</code> from the <code>Applicative</code> class definition. <code>&lt;*&gt;</code> extracts the function from <code>Just func</code>, and applies it to <code>x</code> inside the <code>Just x</code> box. The result is <code>Just (func x)</code>.</p>
<p>Now, let&rsquo;s put the definition of <code>&lt;*&gt;</code> for <code>Maybe</code> type next to the definition of the <code>fmap</code> function:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-haskell" data-lang="haskell"><span style="display:flex;"><span>    (<span style="color:#f92672">&lt;*&gt;</span>) (<span style="color:#66d9ef">Just</span> func) <span style="color:#66d9ef">Nothing</span>  <span style="color:#f92672">=</span> <span style="color:#66d9ef">Nothing</span>
</span></span><span style="display:flex;"><span>    (<span style="color:#f92672">&lt;*&gt;</span>) (<span style="color:#66d9ef">Just</span> func) (<span style="color:#66d9ef">Just</span> x) <span style="color:#f92672">=</span> <span style="color:#66d9ef">Just</span> (func x)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    fmap func <span style="color:#66d9ef">Nothing</span>  <span style="color:#f92672">=</span> <span style="color:#66d9ef">Nothing</span>
</span></span><span style="display:flex;"><span>    fmap func (<span style="color:#66d9ef">Just</span> x) <span style="color:#f92672">=</span> <span style="color:#66d9ef">Just</span> (func x)
</span></span></code></pre></div><p>This makes it obvious that in the definition of <code>&lt;*&gt;</code>, once we extract <code>func</code> out of <code>Just func</code>, we simply map that function over the second argument of <code>&lt;*&gt;</code> (which will be of <code>Maybe</code> type as well). This means that the <code>&lt;*&gt;</code> implementation for <code>Maybe</code> can be re-written as:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-haskell" data-lang="haskell"><span style="display:flex;"><span>    <span style="color:#f92672">&lt;*&gt;</span> (<span style="color:#66d9ef">Just</span> func) something <span style="color:#f92672">=</span> fmap func something
</span></span></code></pre></div><p>This is exactly how the <code>&lt;*&gt;</code> function is implemented at the beginning of this blog post.</p>
<p>Finally, <a href="http://adit.io/posts/2013-04-17-functors,_applicatives,_and_monads_in_pictures.html" title="Functors, Applicatives, And Monads in Pictures">Functors, Applicatives, And Monads In Pictures</a> by <a href="https://twitter.com/_egonschiele" title="Aditya Bhargava's Twitter Page">Aditya Bhargava</a> is one of the best posts I&rsquo;ve read on functors &amp; applicatives. I highly recommend it.</p>]]></content>
    
  </entry>
  <entry>
    <title type="html"><![CDATA[Pascal&#39;s Triangle]]></title>
    <link href="https://umairsaeed.com/pascals-triangle/"/>
    <id>https://umairsaeed.com/pascals-triangle/</id>
    <author>
      <name>Umair Saeed</name>
    </author>
    <published>2015-07-08T06:51:27-07:00</published>
    <updated>2015-07-08T06:51:27-07:00</updated>
    
    <content type="html"><![CDATA[<p>One of the exercises in <a href="https://mitpress.mit.edu/sicp/">Structure and Implementation of Computer Programs</a> deals with generating elements of the <a href="https://en.wikipedia.org/wiki/Pascal's_triangle">Pascal&rsquo;s Triangle</a>.</p>
<p>The following pattern of numbers is called <em>Pascal&rsquo;s Triangle</em></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-console" data-lang="console"><span style="display:flex;"><span>    1
</span></span><span style="display:flex;"><span>   1 1
</span></span><span style="display:flex;"><span>  1 2 1
</span></span><span style="display:flex;"><span> 1 3 3 1
</span></span><span style="display:flex;"><span>1 4 6 4 1
</span></span><span style="display:flex;"><span>...
</span></span></code></pre></div><p>The numbers at the edge of the triangle are 1, and each number inside is the sum of two numbers above it. The exercise asks us to <em>find the elements of Pascal&rsquo;s triangle by means of a recursive process</em>.</p>
<p>I find it helpful to <em>de-skew</em> the triangle so that the rows and columns line up visually. Here&rsquo;s the modified triangle:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-console" data-lang="console"><span style="display:flex;"><span>1
</span></span><span style="display:flex;"><span>1 1
</span></span><span style="display:flex;"><span>1 2 1
</span></span><span style="display:flex;"><span>1 3 3 1
</span></span><span style="display:flex;"><span>1 4 6 4 1
</span></span><span style="display:flex;"><span>...
</span></span></code></pre></div><p>I decided to write the solution in Haskell, and here it is:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-haskell" data-lang="haskell"><span style="display:flex;"><span><span style="color:#75715e">-- A: Function that finds the element of Pascal&#39;s Triangle for a given row &amp; column</span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">pascal</span> <span style="color:#f92672">::</span> <span style="color:#66d9ef">Int</span> <span style="color:#f92672">-&gt;</span> <span style="color:#66d9ef">Int</span> <span style="color:#f92672">-&gt;</span> <span style="color:#66d9ef">Int</span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">pascal</span> <span style="color:#ae81ff">0</span> <span style="color:#66d9ef">_</span> <span style="color:#f92672">=</span> <span style="color:#ae81ff">1</span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">pascal</span> <span style="color:#66d9ef">_</span> <span style="color:#ae81ff">0</span> <span style="color:#f92672">=</span> <span style="color:#ae81ff">1</span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">pascal</span> row col
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">|</span> row <span style="color:#f92672">==</span> col <span style="color:#f92672">=</span> <span style="color:#ae81ff">1</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">|</span> col <span style="color:#f92672">&gt;</span> row  <span style="color:#f92672">=</span> <span style="color:#a6e22e">error</span> <span style="color:#e6db74">&#34;Column can&#39;t be greater than row&#34;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">|</span> otherwise  <span style="color:#f92672">=</span> (pascal (row<span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>) (col<span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>)) <span style="color:#f92672">+</span> (pascal (row<span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>) col)
</span></span></code></pre></div><p>This code is great for generating the element at a given row and column (e.g. <code>pascal 3 2</code> produces <code>3</code>), but not so great if we wanted to generate the entire triangle up to <code>n</code> rows, as recursion would cause the code to generate the elements at row <code>n-1</code> multiple times.</p>
<p>In order to generate the entire triangle, it is better to do it via an iterative process as follows: generate the first row, and from that generate the second row, and so on. I other words, we are generating the next row of the triangle, by adding each pair in the current row. My solution is as follows:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-haskell" data-lang="haskell"><span style="display:flex;"><span><span style="color:#75715e">-- Takes an array of integers, and adds pairs of numbers to create a new</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">-- array. For example, [1,2,3,4] changes to [(1+2), (2+3), (3+4)], resulting</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">-- in [3,5,7]</span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">sumOfPairs</span> <span style="color:#f92672">::</span> [<span style="color:#66d9ef">Integer</span>] <span style="color:#f92672">-&gt;</span> [<span style="color:#66d9ef">Integer</span>]
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">sumOfPairs</span> <span style="color:#66d9ef">[]</span> <span style="color:#f92672">=</span> <span style="color:#66d9ef">[]</span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">sumOfPairs</span> (x<span style="color:#66d9ef">:[]</span>) <span style="color:#f92672">=</span> <span style="color:#66d9ef">[]</span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">sumOfPairs</span> (x<span style="color:#66d9ef">:</span>y<span style="color:#66d9ef">:</span>ys) <span style="color:#f92672">=</span> (x<span style="color:#f92672">+</span>y) <span style="color:#66d9ef">:</span> sumOfPairs (y<span style="color:#66d9ef">:</span>ys)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">-- Given a row of Pascal&#39;s triangle, returns the next row</span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">next</span> <span style="color:#f92672">::</span> [<span style="color:#66d9ef">Integer</span>] <span style="color:#f92672">-&gt;</span> [<span style="color:#66d9ef">Integer</span>]
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">next</span> xs <span style="color:#f92672">=</span> <span style="color:#ae81ff">1</span> <span style="color:#66d9ef">:</span>  (sumOfPairs xs) <span style="color:#f92672">++</span> [<span style="color:#ae81ff">1</span>]
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">-- Generates the Pascal&#39;s triangle. This function generates an</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">-- infinite triangle, so its usage needs to be coupled with the</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">-- take command. For example: take 5 pascalTriangle</span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">pascalTriangle</span> <span style="color:#f92672">::</span> [[<span style="color:#66d9ef">Integer</span>]]
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">pascalTriangle</span> <span style="color:#f92672">=</span> pascalHelper [<span style="color:#ae81ff">1</span>]
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">where</span> pascalHelper xs <span style="color:#f92672">=</span> xs <span style="color:#66d9ef">:</span> pascalHelper (next xs)
</span></span></code></pre></div><p>Here are a couple of examples of generating the triangle:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-haskell" data-lang="haskell"><span style="display:flex;"><span><span style="color:#f92672">*</span><span style="color:#66d9ef">Main</span><span style="color:#f92672">&gt;</span> take <span style="color:#ae81ff">4</span> pascalTriangle
</span></span><span style="display:flex;"><span>[[<span style="color:#ae81ff">1</span>],[<span style="color:#ae81ff">1</span>,<span style="color:#ae81ff">1</span>],[<span style="color:#ae81ff">1</span>,<span style="color:#ae81ff">2</span>,<span style="color:#ae81ff">1</span>],[<span style="color:#ae81ff">1</span>,<span style="color:#ae81ff">3</span>,<span style="color:#ae81ff">3</span>,<span style="color:#ae81ff">1</span>]]
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">-- Using mapM_ with print to &#39;pretty-print&#39; the triangle</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">*</span><span style="color:#66d9ef">Main</span><span style="color:#f92672">&gt;</span> mapM_ print <span style="color:#f92672">$</span> take <span style="color:#ae81ff">8</span> pascalTriangle
</span></span><span style="display:flex;"><span>[<span style="color:#ae81ff">1</span>]
</span></span><span style="display:flex;"><span>[<span style="color:#ae81ff">1</span>,<span style="color:#ae81ff">1</span>]
</span></span><span style="display:flex;"><span>[<span style="color:#ae81ff">1</span>,<span style="color:#ae81ff">2</span>,<span style="color:#ae81ff">1</span>]
</span></span><span style="display:flex;"><span>[<span style="color:#ae81ff">1</span>,<span style="color:#ae81ff">3</span>,<span style="color:#ae81ff">3</span>,<span style="color:#ae81ff">1</span>]
</span></span><span style="display:flex;"><span>[<span style="color:#ae81ff">1</span>,<span style="color:#ae81ff">4</span>,<span style="color:#ae81ff">6</span>,<span style="color:#ae81ff">4</span>,<span style="color:#ae81ff">1</span>]
</span></span><span style="display:flex;"><span>[<span style="color:#ae81ff">1</span>,<span style="color:#ae81ff">5</span>,<span style="color:#ae81ff">10</span>,<span style="color:#ae81ff">10</span>,<span style="color:#ae81ff">5</span>,<span style="color:#ae81ff">1</span>]
</span></span><span style="display:flex;"><span>[<span style="color:#ae81ff">1</span>,<span style="color:#ae81ff">6</span>,<span style="color:#ae81ff">15</span>,<span style="color:#ae81ff">20</span>,<span style="color:#ae81ff">15</span>,<span style="color:#ae81ff">6</span>,<span style="color:#ae81ff">1</span>]
</span></span><span style="display:flex;"><span>[<span style="color:#ae81ff">1</span>,<span style="color:#ae81ff">7</span>,<span style="color:#ae81ff">21</span>,<span style="color:#ae81ff">35</span>,<span style="color:#ae81ff">35</span>,<span style="color:#ae81ff">21</span>,<span style="color:#ae81ff">7</span>,<span style="color:#ae81ff">1</span>]
</span></span></code></pre></div><p>The function <code>pascalTriangle</code> can be made more concise by using the built-in <code>iterate</code> instead of my <code>pascalHelper</code>:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-haskell" data-lang="haskell"><span style="display:flex;"><span><span style="color:#a6e22e">pascalTriangle</span> <span style="color:#f92672">::</span> [[<span style="color:#66d9ef">Integer</span>]]
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">pascalTriangle</span> <span style="color:#f92672">=</span> iterate next [<span style="color:#ae81ff">1</span>]
</span></span></code></pre></div><p>By this point, I was reasonably satisfied with the code. However, being relatively new to Haskell, I decided to explore and see if there were other (and possibly better and more idiomatic) ways to solve this problem. My favorite was by <a href="http://neilmitchell.blogspot.com/2012/01/pascals-triangle-in-haskell.html">Neil Mitchell</a>, who solved the problem in two lines! I encourage you to go read <a href="http://neilmitchell.blogspot.com/2012/01/pascals-triangle-in-haskell.html">Neil&rsquo;s entire post</a>. Here&rsquo;s the two-line version of Haskell&rsquo;s triangle:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-haskell" data-lang="haskell"><span style="display:flex;"><span><span style="color:#75715e">-- By: Neil Mitchell</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">-- (http://neilmitchell.blogspot.com/2012/01/pascals-triangle-in-haskell.html)</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">next</span> xs <span style="color:#f92672">=</span> zipWith (<span style="color:#f92672">+</span>) ([<span style="color:#ae81ff">0</span>] <span style="color:#f92672">++</span> xs) (xs <span style="color:#f92672">++</span> [<span style="color:#ae81ff">0</span>])
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">pascal</span> <span style="color:#f92672">=</span> iterate next [<span style="color:#ae81ff">1</span>]
</span></span></code></pre></div><p>In my view, this code is very elegant and beautiful and does a great job of highlighting the power of Haskell.</p>]]></content>
    
  </entry>
  <entry>
    <title type="html"><![CDATA[Index Based List Operations Using folds in Haskell]]></title>
    <link href="https://umairsaeed.com/index-based-list-operations-using-folds-in-haskell/"/>
    <id>https://umairsaeed.com/index-based-list-operations-using-folds-in-haskell/</id>
    <author>
      <name>Umair Saeed</name>
    </author>
    <published>2015-05-16T08:53:31-07:00</published>
    <updated>2015-05-16T08:53:31-07:00</updated>
    
    <content type="html"><![CDATA[<p>When working with lists in Haskell, occasionally there&rsquo;s a need to perform index based operations, such as adding an element at a particular index. As a Haskell <em>newbie</em>, using <code>foldl</code> or <code>foldr</code> is not the first idea that comes to mind when indices are involved. However, there is a general pattern that can be applied when using folds for index-based list operations.</p>
<p>For example, consider the case where we need to add an element at a particular index:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-haskell" data-lang="haskell"><span style="display:flex;"><span><span style="color:#75715e">-- inserting at an index, using foldr</span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">insertAt</span> <span style="color:#f92672">::</span> a <span style="color:#f92672">-&gt;</span> [a] <span style="color:#f92672">-&gt;</span> <span style="color:#66d9ef">Int</span> <span style="color:#f92672">-&gt;</span> [a]
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">insertAt</span> x ys n <span style="color:#f92672">=</span> foldr insertHelper <span style="color:#66d9ef">[]</span> <span style="color:#f92672">$</span> zip [<span style="color:#ae81ff">0</span><span style="color:#f92672">..</span>] ys
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">where</span>
</span></span><span style="display:flex;"><span>        insertHelper (i,y) acc <span style="color:#f92672">=</span> <span style="color:#66d9ef">if</span> i <span style="color:#f92672">==</span> n
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">then</span> x <span style="color:#66d9ef">:</span> y <span style="color:#66d9ef">:</span> acc
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">else</span> y <span style="color:#66d9ef">:</span> acc
</span></span></code></pre></div><p>The basic idea is simple: We simply zip <code>[0..]</code> with the input list (<code>ys</code>) to get a list of tuples. The first element of each tuple is the index of the element in the list <code>ys</code> (input list). This allows us to perform index based tests in the helper function, as shown in <code>insertHelper</code> above.</p>
<p>Both left and right folds can be used for index based list operations. Here&rsquo;s the same example using <code>foldl</code>.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-haskell" data-lang="haskell"><span style="display:flex;"><span><span style="color:#75715e">-- inserting at an index, using foldl</span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">insertAtL</span> <span style="color:#f92672">::</span> a <span style="color:#f92672">-&gt;</span> [a] <span style="color:#f92672">-&gt;</span> <span style="color:#66d9ef">Int</span> <span style="color:#f92672">-&gt;</span> [a]
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">insertAtL</span> x ys n <span style="color:#f92672">=</span> foldl insertLHelper <span style="color:#66d9ef">[]</span> <span style="color:#f92672">$</span> zip [<span style="color:#ae81ff">0</span><span style="color:#f92672">..</span>] ys
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">where</span>
</span></span><span style="display:flex;"><span>        insertLHelper acc (i,y) <span style="color:#f92672">=</span> <span style="color:#66d9ef">if</span> i <span style="color:#f92672">==</span> n
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">then</span> acc <span style="color:#f92672">++</span> [x] <span style="color:#f92672">++</span> [y]
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">else</span> acc <span style="color:#f92672">++</span> [y]
</span></span></code></pre></div><p>Both left and right fold produce the same result. Adding an element to the head of the list (via <code>:</code>) is more efficient than concatenating lists (via <code>++</code>), so generally I prefer using the 1st version, i.e. one that uses <code>foldr</code></p>
<p><a href="https://gist.github.com/umairsd/cdcb397941762fe02d05">Here&rsquo;s a gist</a> with examples of  <code>insertAt</code>, <code>updateAt</code>, and <code>deleteAt</code> functions, all implemented using folds.</p>]]></content>
    
  </entry>
  <entry>
    <title type="html"><![CDATA[Talking About Money]]></title>
    <link href="https://umairsaeed.com/talking-about-money/"/>
    <id>https://umairsaeed.com/talking-about-money/</id>
    <author>
      <name>Umair Saeed</name>
    </author>
    <published>2015-05-04T09:43:03-07:00</published>
    <updated>2015-05-04T09:43:03-07:00</updated>
    
    <content type="html"><![CDATA[<p>Patrick McKenzie wrote an excellent post about compensation and salary transparency. The entire post is really informative, but for me, this passage is a true gem. Every word here is absolutely true:</p>
<blockquote>
<p>Compensation negotiations are presently like a stock exchange where only your counterparty can see the ticker and order book. You’d never send an order to that exchange — it would be an invitation to be fleeced. “I happen to have a share of Google and want to sell it. What’s it go for?” “Oh, $200 or so.” “Really? That feels low.” “Alright, $205 then, but don’t be greedy.”</p>
<p>The spot price of Google when I write this is $535. Someone offering $205 for GOOG would shock the conscience. In the years since I wrote a post on salary negotiation for engineers I have received many letters suggesting folks have received and accepted employment offers much worse than that, relative to reasonably achievable market rates.</p>
</blockquote>
<p>I highly recommend that everyone read his post <a href="http://www.kalzumeus.com/2012/01/23/salary-negotiation/">Salary Negotiation: Make More Money, Be More Valued</a>. Really informative and useful.</p>]]></content>
    
  </entry>
  <entry>
    <title type="html"><![CDATA[Sublime Text &amp;amp; Haskell]]></title>
    <link href="https://umairsaeed.com/sublime-text-and-haskell/"/>
    <id>https://umairsaeed.com/sublime-text-and-haskell/</id>
    <author>
      <name>Umair Saeed</name>
    </author>
    <published>2015-05-02T16:07:28-07:00</published>
    <updated>2021-01-15T00:00:00+00:00</updated>
    
    <content type="html"><![CDATA[<p>There are several excellent posts about setting up the Haskell development environment. One of the best ones is Tony Lawrence&rsquo;s <a href="http://tonylawrence.com/blog/2014/01/01/configuring-your-haskell-environment/" title="Configuring Your Haskell Environment">Configuring Your Haskell Environment</a>. I encourage you to take a look at his post first.</p>
<p>Tony&rsquo;s post is more than a year old though, and it looks like a couple of things have changed since he wrote his post, especially with the latest version of Haskell and <a href="https://github.com/SublimeHaskell/SublimeHaskell" title="SublimeHaskell">SublimeHaskell</a>. I wasted a good chunk of time trying to get around those problems, so now writing this post in case others run into similar issues when setting up the SublimeHaskell plugin.</p>
<!-- raw HTML omitted -->
<p>Here&rsquo;s a summary of the steps to setup the Haskell dev environment (from <a href="https://github.com/SublimeHaskell/SublimeHaskell" title="SublimeHaskell">Tony&rsquo;s blog</a>).</p>
<ul>
<li>Install the Haskell platform.</li>
<li>Issue <code>cabal update</code> to update the list of available packages for Haskell.</li>
<li>Install the requisite packages by issuing <code>cabal install aeson haskell-src-exts haddock hdevtools</code>.</li>
<li>Install Sublime Text 3.</li>
<li>Install Package Control for Sublime Text 3.</li>
<li>Install SublimeHaskell via Package Control.</li>
</ul>
<p>This last step doesn&rsquo;t work seamlessly. When I installed SublimeHaskell, I ran into the following error message in Sublime Text:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-console" data-lang="console"><span style="display:flex;"><span>SublimeHaskell: Failed to compile ModuleInspector
</span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">
</span></span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010"></span>/Users/umair/Library/Application Support/Sublime Text 3/Packages/SublimeHaskell/ModuleInspector.hs:141:12:
</span></span><span style="display:flex;"><span>    Not in scope: data constructor ‘H.PNeg’
</span></span><span style="display:flex;"><span>    Perhaps you meant ‘H.PRec’ (imported from Language.Haskell.Exts)
</span></span></code></pre></div><p>The problem is described in more detail in <a href="https://github.com/SublimeHaskell/SublimeHaskell/issues/182" title="SublimeHaskell issue # 182">issue #182</a> on <a href="https://github.com/SublimeHaskell/SublimeHaskell" title="SublimeHaskell">SublimeHaskell&rsquo;s GitHub page</a>. The summary is that the master branch of SublimeHaskell is too slow to accomodate the removal of <code>PNeg</code> from <code>haskell-src-exts</code>. The solution is to use the <code>hsdev</code> branch of SublimeHaskell. This is done as follows (recommended by <a href="https://github.com/MoreAxes" title="GitHub user MoreAxes">MoreAxes</a> on comment thread for <a href="https://github.com/SublimeHaskell/SublimeHaskell/issues/182" title="SublimeHaskell issue # 182">issue #182</a>):</p>
<blockquote>
<ul>
<li>In Sublime Text, launch Package Control (<code>cmd-shift-p</code>), and use the &lsquo;Add Repository&rsquo; command to add <code>https://github.com/SublimeHaskell/SublimeHaskell/tree/hsdev</code>.</li>
<li>Install SublimeHaskell with Package Control normally. Package Control looks in user-defined repositories first, so it is able to get SublimeHaskell from the <code>hsdev</code> branch.</li>
<li>Restart Sublime Text.</li>
</ul>
</blockquote>
<p>You can now enter and build Haskell code from Sublime Text. To verify your setup, enter the following code in Sublime Text, and then hit <code>cmd-B</code></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-haskell" data-lang="haskell"><span style="display:flex;"><span><span style="color:#a6e22e">main</span> <span style="color:#f92672">::</span> <span style="color:#66d9ef">IO</span>()
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">main</span> <span style="color:#f92672">=</span> <span style="color:#66d9ef">do</span>
</span></span><span style="display:flex;"><span>    print <span style="color:#e6db74">&#34;Hello World&#34;</span>
</span></span></code></pre></div><p>You will see the following printed:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-console" data-lang="console"><span style="display:flex;"><span>&#34;Hello World&#34;
</span></span><span style="display:flex;"><span>[Finished in 0.2s]
</span></span></code></pre></div><p>Here&rsquo;s a screenshot of my test file, with the output of the program:</p>
<p><img src="/img/sublime-text-haskell-test.png" alt="Haskell in Sublime Text"></p>]]></content>
    
  </entry>
  <entry>
    <title type="html"><![CDATA[Why Racket? Why Lisp?]]></title>
    <link href="https://umairsaeed.com/why-racket-why-lisp/"/>
    <id>https://umairsaeed.com/why-racket-why-lisp/</id>
    <author>
      <name>Umair Saeed</name>
    </author>
    <published>2015-03-27T10:30:53-07:00</published>
    <updated>2015-03-27T10:30:53-07:00</updated>
    
    <content type="html"><![CDATA[<p>A slightly older (from Aug 2014), but nonetheless <a href="http://practicaltypography.com/why-racket-why-lisp.html" title="Why Racket, Why Lisp">great post</a> by Matthew Butterick where he enumerates the benefits of learning to program in Lisp (or one of its dialects).</p>
<p>Several very smart folks have written about the awesomeness of Lisp, but this is the first post I have read that provides a list of concrete examples of said benefits and answers some key questions for me:</p>
<blockquote>
<p>I was hope­ful when I opened Pe­ter Seibel’s Prac­ti­cal Com­mon Lisp and saw that the in­tro­duc­tion was sub­ti­tled “Why Lisp?” Yes, tell me! Seibel echoes Gra­ham’s claim: “You’ll get more done, faster, us­ing [Lisp] than you would us­ing pretty much any other lan­guage.” OK, but how? Seibel won­ders whether “I like Lisp be­cause of some quirk in the way my brain is wired. It could even be ge­netic, since my dad has it too.” That’s not en­cour­ag­ing to those of us out­side your fam­ily. Ul­ti­mately, he sums up the ap­peal of Lisp by de­scrib­ing it as “the pro­gram­ma­ble pro­gram­ming lan­guage.” But I’ve never used a pro­gram­ma­ble pro­gram­ming lan­guage. Why should I start?</p>
<p>And by the way, when do I get the speed and power you keep promising?</p>
<p>In short—what’s in it for me, now?</p>
</blockquote>]]></content>
    
  </entry>
  <entry>
    <title type="html"><![CDATA[Book - Hackers &amp;amp; Painters]]></title>
    <link href="https://umairsaeed.com/book-hackers-and-painters/"/>
    <id>https://umairsaeed.com/book-hackers-and-painters/</id>
    <author>
      <name>Umair Saeed</name>
    </author>
    <published>2015-03-26T10:00:12-07:00</published>
    <updated>2015-03-26T10:00:12-07:00</updated>
    
    <content type="html"><![CDATA[<p>A couple of days ago, I finished reading Paul Graham&rsquo;s book of essays <a href="http://www.amazon.com/Hackers-Painters-Big-Ideas-Computer/dp/1449389554">Hackers and Painters: Big Ideas from the Computer Age</a>, and thoroughly enjoyed the book. I had already read a few of these essays on his <a href="http://www.paulgraham.com/articles.html">website</a>, yet I still enjoyed re-reading them. The essays are very insightful, and I plan to re-read several essays &amp; passages periodically.</p>
<figure><img src="/img/hackers_and_painters_book.jpg"
         alt="My bookmarked copy"/><figcaption>
            <p>My bookmarked copy</p>
        </figcaption>
</figure>

<p>Here are some of the essays that I particularly enjoyed:</p>
<p><a href="http://www.paulgraham.com/hp.html">Hackers &amp; Painters</a>: What does it mean to be a hacker? A great hacker? What is common between hackers and other makers? This essay explores all these ideas, and does so very well. Probably one of my favorites (though, it is hard to pick just one favorite).</p>
<p><a href="http://www.paulgraham.com/avg.html">Beating the averages</a>: Very thought provoking essay, and really resonated with me as it argues something that I too have observed. Not all <em>high-level</em> programming languages are equally powerful. Some languages are more powerful than others. Programming languages fall on different points on the power continuum, and moving higher on this contiuum has allowed me to think and reason about programs in more powerful ways. In liguistics, this is the <a href="http://en.wikipedia.org/wiki/Linguistic_relativity">Sapir-Whorf hypothesis</a>:</p>
<blockquote>
<p>The principle of linguistic relativity holds that the structure of a language affects the ways in which its respective speakers conceptualize their world, i.e. their world view, or otherwise influences their cognitive processes.</p>
</blockquote>
<p><a href="http://www.paulgraham.com/hundred.html">The hundred-year language</a>: Another way to think about programming languages is to think them on an evolutionary tree. In this scenario, some fall on evolutionary dead-ends, and thus do not have any intellectual descendants. Once we start thinking about programming languages using this model, it becomes easier to see how languages might evolve, and predict the future evolution of programming languages.</p>
<p><a href="http://www.paulgraham.com/wealth.html">How to make wealth</a>: I had not read this essay before, and had not given any serious thought to the difference betweeen money and wealth. This essay explores the differences between the two, and really sold me on the idea &ldquo;Wealth is what you want, not money&rdquo;. Great read &amp; very informative.</p>]]></content>
    
  </entry>
  <entry>
    <title type="html"><![CDATA[A Quine in Objective-C]]></title>
    <link href="https://umairsaeed.com/a-quine-in-objective-c/"/>
    <id>https://umairsaeed.com/a-quine-in-objective-c/</id>
    <author>
      <name>Umair Saeed</name>
    </author>
    <published>2012-07-18T13:46:06+00:00</published>
    <updated>2012-07-18T13:46:06+00:00</updated>
    
    <content type="html"><![CDATA[<p>A quine is a program that takes no input and outputs its own source code. It has been a while since I last wrote a quine, so I figured I&rsquo;ll write one in Objective-C. In general, quines follow a fairly simple formula. The program contains a string that includes all the code before the string and all the code after the string. Depending on the programming language, the string might also contain format string (for languages that use format-strings to print to <code>stdout</code>)</p>
<p>Here is the code for the quine. I&rsquo;ve broken the code below into segments to make it simpler to understand:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-objc" data-lang="objc"><span style="display:flex;"><span><span style="color:#75715e">#import &lt;Foundation/Foundation.h&gt;
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#66d9ef">int</span> <span style="color:#a6e22e">main</span> (<span style="color:#66d9ef">int</span> argc, <span style="color:#66d9ef">const</span> <span style="color:#66d9ef">char</span> <span style="color:#f92672">*</span> argv[]) {
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">@autoreleasepool</span> {
</span></span><span style="display:flex;"><span>    NSString <span style="color:#f92672">*</span>str<span style="color:#f92672">=</span><span style="color:#e6db74">@&#34; \
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">      #import &lt;Foundation/Foundation.h&gt; %c \
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">      int main (int argc, const char * argv[]) { @autoreleasepool { NSString *str= \
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">      %c%c%@%c; \
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">      NSLog(str, 10, 64, 34, str, 34);} return 0;}&#34;</span>;
</span></span><span style="display:flex;"><span>    NSLog(str, <span style="color:#ae81ff">10</span>, <span style="color:#ae81ff">64</span>, <span style="color:#ae81ff">34</span>, str, <span style="color:#ae81ff">34</span>);
</span></span><span style="display:flex;"><span>  }
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">return</span> <span style="color:#ae81ff">0</span>;
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>Before I go on, 10, 64 and 34 are the ASCII character codes for <code>newline</code>, <code>@</code> and <code>&quot;</code>respectively. To make it clearer, I&rsquo;ve broken the string into four lines. The first two lines contain the source code before the string. The 3rd line is the format string and the last line is the source code after the string. Here&rsquo;s the code with all lines collapsed:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-objc" data-lang="objc"><span style="display:flex;"><span><span style="color:#75715e">#import &lt;Foundation/Foundation.h&gt;
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#66d9ef">int</span> <span style="color:#a6e22e">main</span> (<span style="color:#66d9ef">int</span> argc, <span style="color:#66d9ef">const</span> <span style="color:#66d9ef">char</span> <span style="color:#f92672">*</span> argv[]) {
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">@autoreleasepool</span> {
</span></span><span style="display:flex;"><span>    NSString <span style="color:#f92672">*</span>str<span style="color:#f92672">=</span><span style="color:#e6db74">@&#34;#import &lt;Foundation/Foundation.h&gt; %c int main (int argc, const char * argv[]) { @autoreleasepool { NSString *str=%c%c%@%c; NSLog(str, 10, 64, 34, str, 34);} return 0;}&#34;</span>;
</span></span><span style="display:flex;"><span>    NSLog(str, <span style="color:#ae81ff">10</span>, <span style="color:#ae81ff">64</span>, <span style="color:#ae81ff">34</span>, str, <span style="color:#ae81ff">34</span>);
</span></span><span style="display:flex;"><span>  }
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">return</span> <span style="color:#ae81ff">0</span>;
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>Finally, here&rsquo;s the output when you execute this program. As you can tell, this is the same as the original program (minus the whitespace)</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-objc" data-lang="objc"><span style="display:flex;"><span><span style="color:#75715e">#import &lt;Foundation/Foundation.h&gt;
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span> <span style="color:#66d9ef">int</span> <span style="color:#a6e22e">main</span> (<span style="color:#66d9ef">int</span> argc, <span style="color:#66d9ef">const</span> <span style="color:#66d9ef">char</span> <span style="color:#f92672">*</span> argv[]) { <span style="color:#66d9ef">@autoreleasepool</span> { NSString <span style="color:#f92672">*</span>str<span style="color:#f92672">=</span><span style="color:#e6db74">@&#34;#import &lt;Foundation/Foundation.h&gt; %c int main (int argc, const char * argv[]) { @autoreleasepool { NSString *str=%c%c%@%c; NSLog(str, 10, 64, 34, str, 34);} return 0;}&#34;</span>; NSLog(str, <span style="color:#ae81ff">10</span>, <span style="color:#ae81ff">64</span>, <span style="color:#ae81ff">34</span>, str, <span style="color:#ae81ff">34</span>);} <span style="color:#66d9ef">return</span> <span style="color:#ae81ff">0</span>;}
</span></span></code></pre></div>]]></content>
    
  </entry>
  <entry>
    <title type="html"><![CDATA[Finding the Start of a Loop in a Circular Linked List]]></title>
    <link href="https://umairsaeed.com/finding-the-start-of-a-loop-in-a-circular-linked-list/"/>
    <id>https://umairsaeed.com/finding-the-start-of-a-loop-in-a-circular-linked-list/</id>
    <author>
      <name>Umair Saeed</name>
    </author>
    <published>2011-06-23T13:54:07+00:00</published>
    <updated>2011-06-23T13:54:07+00:00</updated>
    
    <content type="html"><![CDATA[<p>A lot of people are familiar with the problem of detecting a loop in a linked list. The problem goes as follows: “Given a linked list, what is the algorithm to determine if it has any cycles (loops)?”</p>
<p>The algorithm is pretty straightforward:</p>
<ol>
<li>We start at the beginning of the linked list with two pointers.</li>
<li>The first pointer is incremented through each node of the list. The second pointer moves twice as fast, and skips every other node.</li>
<li>If the linked list contains a loop, these two pointers will eventually meet at the same node, thus indicating that the linked list contains a loop.</li>
</ol>
<p>Now, a slight twist to the same question asks: “Given a circular linked list, what is the algorithm to find the first node of the loop.”</p>
<p>For instance, in the circular list <code>A-&gt;B-&gt;C-&gt;D-&gt;E-&gt;C</code>, the first node of the loop is node <code>C</code>. The first part of the algorithm is identical to the algorithm for finding if there is a loop (above). Once a loop has been found, the following additional steps will give us the starting node of the loop:</p>
<ol>
<li>Once a loop as been detected (step-3 above), move one of the pointers to the beginning (head) of the linked list. The second pointer remains where it was at the end of step-3.</li>
<li>Increment both pointers one node at a time. The node at which the two pointers meet will be the starting node of the loop!</li>
</ol>
<p>This algorithm isn’t too difficult compared to the algorithm for detecting a loop. However, the mental model seems a bit trickier. Why and how does it always find the start of the loop?</p>
<h2 id="an-intuitive-explanation">An intuitive explanation</h2>
<p>Here’s an intuitive explanation of how the algorithm works, without going into a lot of mathematical detail.</p>
<h3 id="first-meeting-point-of-two-pointers-in-a-loop">First, meeting point of two pointers in a loop</h3>
<p>Consider two pointers: a slow pointer <code>S</code> that increments by one node at each step, and a fast pointer <code>F</code> that increments by two nodes at each step (i.e. it is twice as fast as <code>S</code>). Both pointers start at the same time from the beginning of an n-node loop. In the time <code>S</code> covers n nodes. <code>F</code> will have covered <code>2n</code> nodes and they will both meet at the start of the loop.</p>
<p>Now, let us say that the slow pointer <code>S</code> starts at the beginning of the loop, and the fast pointer <code>F</code> starts at the <code>k</code>th node (where <code>k</code> &lt; <code>n</code>) of the loop. As these two pointers move along the loop, they will meet at node <code>(n - x)</code>, i.e. <code>x</code> nodes from the end of the loop.</p>
<p>What we really need to do is figure out x, as it will give us the node at which the two pointers meet inside the loop.</p>
<ol>
<li>
<p>When <code>S</code> takes <code>n/2</code> steps, it will be at node <code>n / 2</code>. During the same time, <code>F</code> will have taken <code>2 (n / 2) = n</code> steps, and it will be at node <code>(k + n)</code>. Since the we are inside a loop, <code>F</code> will be effectively back at node <code>k</code>.</p>
</li>
<li>
<p>In order for the two pointers to meet at node <code>(n - x)</code>, <code>S</code> needs to take a further <code>(n - x - n/2) = (n/2 - x)</code> steps and it will end up at node <code>n - x</code>. During the same time, <code>F</code> will have taken <code>2 * (n/2 - x) = n - 2x</code> steps and will be at node <code>k + (n - 2x)</code>. Given our assumption that both <code>S</code> and <code>F</code> meet at the same node:</p>
</li>
</ol>
<pre tabindex="0"><code class="language-math" data-lang="math">    n-x = k+n-2x
=&gt;    x = k
</code></pre><p>This means that if <code>S</code> starts from the start of the loop, and <code>F</code> starts <code>k</code> nodes into the loop, both of them will meet at node <code>n - k</code>, i.e <code>k</code> nodes from the end of the loop. This is a key insight.</p>
<h2 id="circular-linked-list">Circular Linked List</h2>
<p>Now, coming back to the linked list that contains a loop. Suppose the start of the loop is <code>m</code> (e.g. <code>m</code>=3) nodes from the start of the linked list. Both <code>S</code> and <code>F</code> start at the beginning of the linked list [Figure-1].</p>
<figure><img src="/img/circular-loop-figure-1.jpg"
         alt="Figure-1: Circular linked list with S and F pointers at the start"/><figcaption>
            <p>Figure-1: Circular linked list with S and F pointers at the start</p>
        </figcaption>
</figure>

<p>By the time <code>S</code> gets to node <code>m</code> (i.e. start of loop), <code>F</code> will be at node <code>2m</code> [Figure-2]. This means that <code>S</code> will be at the start of the loop and <code>F</code> will be <code>m</code> nodes <em>into the loop</em>.</p>
<figure><img src="/img/circular-loop-figure-2.jpg"
         alt="Figure-2: Circular linked list, with S at the start of loop and F m nodes into the loop"/><figcaption>
            <p>Figure-2: Circular linked list, with S at the start of loop and F m nodes into the loop</p>
        </figcaption>
</figure>

<p>Based on the discussion above, we already know that if <code>S</code> begins from the start of the loop and <code>F</code> starts from node <code>m</code>, they will meet <code>m</code> nodes from the end of the loop (i.e. the orange-node in [Figure-3]).</p>
<figure><img src="/img/circular-loop-figure-3.jpg"
         alt="Figure-3: Both F and S meet m nodes from the end of the loop"/><figcaption>
            <p>Figure-3: Both F and S meet m nodes from the end of the loop</p>
        </figcaption>
</figure>

<p>At this point, keep the pointer <code>F</code> at the orange-node where the two pointers met (i.e. <code>m</code>-nodes from the start of the loop), and move the pointer <code>S</code> to the beginning of the linked list [Figure-4]. Now, if we increment both <code>S</code> and <code>F</code> <em>one node at a time</em>, it is obvious that they will meet at &lsquo;Node-m&rsquo; (red-node) of the list, which is the start of the loop.</p>
<figure><img src="/img/circular-loop-figure-4.jpg"
         alt="Figure-4: S at the start of linked list, F at the point they met. Both increment one at a time from here-on"/><figcaption>
            <p>Figure-4: S at the start of linked list, F at the point they met. Both increment one at a time from here-on</p>
        </figcaption>
</figure>

<p>For the curious, here’s the Java code snippets for detecting a loop in a linked list and finding the starting node:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span><span style="color:#75715e">/**
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"> * Checks if the given linked list is a circular linked list (i.e. it
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"> * contains a loop). This means a list in which a node&#39;s next pointer points
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"> * to an earlier node, so as to make a loop in the linked list. For
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"> * instance:
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"> *     A -&gt; B -&gt; C -&gt; D -&gt; E -&gt; C
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"> *
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"> * @param head
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"> *            The linked list to be tested
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"> * @return true if there is a loop, false if there isn&#39;t
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"> */</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">public</span> <span style="color:#66d9ef">static</span> <span style="color:#66d9ef">boolean</span> <span style="color:#a6e22e">hasLoop</span><span style="color:#f92672">(</span>ListNode head<span style="color:#f92672">)</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">if</span> <span style="color:#f92672">(</span>head <span style="color:#f92672">==</span> <span style="color:#66d9ef">null</span><span style="color:#f92672">)</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> <span style="color:#66d9ef">false</span><span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  ListNode slow <span style="color:#f92672">=</span> head<span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span>  ListNode fast <span style="color:#f92672">=</span> head<span style="color:#f92672">.</span><span style="color:#a6e22e">next</span><span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">while</span><span style="color:#f92672">(</span>slow <span style="color:#f92672">!=</span> <span style="color:#66d9ef">null</span> <span style="color:#f92672">&amp;&amp;</span> fast <span style="color:#f92672">!=</span> <span style="color:#66d9ef">null</span> <span style="color:#f92672">&amp;&amp;</span> fast<span style="color:#f92672">.</span><span style="color:#a6e22e">next</span> <span style="color:#f92672">!=</span> <span style="color:#66d9ef">null</span><span style="color:#f92672">)</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">if</span> <span style="color:#f92672">(</span>slow <span style="color:#f92672">==</span> fast<span style="color:#f92672">)</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>      <span style="color:#66d9ef">return</span> <span style="color:#66d9ef">true</span><span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    slow <span style="color:#f92672">=</span> slow<span style="color:#f92672">.</span><span style="color:#a6e22e">next</span><span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span>    fast <span style="color:#f92672">=</span> fast<span style="color:#f92672">.</span><span style="color:#a6e22e">next</span><span style="color:#f92672">.</span><span style="color:#a6e22e">next</span><span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">return</span> <span style="color:#66d9ef">false</span><span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">}</span>
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span><span style="color:#75715e">/**
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"> * Returns the node at the start of a loop in the given circular linked
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"> * list. A circular list is one in which a node&#39;s next pointer points
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"> * to an earlier node, so as to make a loop in the linked list. For
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"> * instance:
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"> *
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"> * input: A -&gt; B -&gt; C -&gt; D -&gt; E -&gt; C [the same C as earlier]
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"> * output: C
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"> *
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"> * @param linkedList
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"> *            list to be tested
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"> * @return the node at the start of the loop if there is a loop, null
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"> * otherwise
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"> */</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">public</span> <span style="color:#66d9ef">static</span> ListNode <span style="color:#a6e22e">findLoopStart</span><span style="color:#f92672">(</span>ListNode head<span style="color:#f92672">)</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">if</span> <span style="color:#f92672">(</span>head <span style="color:#f92672">==</span> <span style="color:#66d9ef">null</span><span style="color:#f92672">)</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> <span style="color:#66d9ef">null</span><span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  ListNode slow <span style="color:#f92672">=</span> head<span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span>  ListNode fast <span style="color:#f92672">=</span> head<span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">while</span> <span style="color:#f92672">(</span>fast <span style="color:#f92672">!=</span> <span style="color:#66d9ef">null</span> <span style="color:#f92672">&amp;&amp;</span> fast<span style="color:#f92672">.</span><span style="color:#a6e22e">next</span> <span style="color:#f92672">!=</span> <span style="color:#66d9ef">null</span><span style="color:#f92672">)</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>    slow <span style="color:#f92672">=</span> slow<span style="color:#f92672">.</span><span style="color:#a6e22e">next</span><span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span>    fast <span style="color:#f92672">=</span> fast<span style="color:#f92672">.</span><span style="color:#a6e22e">next</span><span style="color:#f92672">.</span><span style="color:#a6e22e">next</span><span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">if</span> <span style="color:#f92672">(</span>slow <span style="color:#f92672">==</span> fast<span style="color:#f92672">)</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>      <span style="color:#66d9ef">break</span><span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  <span style="color:#75715e">// No cycle if the fast pointer gets to the end of the list.
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>  <span style="color:#66d9ef">if</span> <span style="color:#f92672">(</span>fast <span style="color:#f92672">==</span> <span style="color:#66d9ef">null</span><span style="color:#f92672">)</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> <span style="color:#66d9ef">null</span><span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  ListNode interesection <span style="color:#f92672">=</span> slow<span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span>  ListNode p1 <span style="color:#f92672">=</span> head<span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span>  ListNode p2 <span style="color:#f92672">=</span> intersection<span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">while</span> <span style="color:#f92672">(</span>p1 <span style="color:#f92672">!=</span> p2<span style="color:#f92672">)</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>    p1 <span style="color:#f92672">=</span> p1<span style="color:#f92672">.</span><span style="color:#a6e22e">next</span><span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span>    p2 <span style="color:#f92672">=</span> p2<span style="color:#f92672">.</span><span style="color:#a6e22e">next</span><span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">return</span> p1<span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">}</span>
</span></span></code></pre></div>]]></content>
    
  </entry>
  <entry>
    <title type="html"><![CDATA[Stern-Brocot Tree]]></title>
    <link href="https://umairsaeed.com/stern-brocot-tree/"/>
    <id>https://umairsaeed.com/stern-brocot-tree/</id>
    <author>
      <name>Umair Saeed</name>
    </author>
    <published>2011-01-27T13:56:15+00:00</published>
    <updated>2011-01-27T13:56:15+00:00</updated>
    
    <content type="html"><![CDATA[<p>Stern-Brocot tree is a tree data structure whose vertices correspond to the set of non-negative rational numbers. Thus, this tree provides a very elegant way for constructing the set of fractions <code>m/n</code>, where <code>m</code> and <code>n</code> are relatively prime. To construct the tree, the basic idea is to start with two fractions (<code>0/1</code>, <code>1/0</code>) and then repeat the following operation:</p>
<blockquote>
<p>Insert (m+m&rsquo;)/(n+n&rsquo;) between two adjacent fractions m/n and m&rsquo;/n'</p>
</blockquote>
<p>The first step gives us the entry <code>1/1</code> between <code>0/1</code> and <code>1/0</code>. Similarly, the 2nd step gives us two more: <code>0/1</code>, <code>1/2</code>, <code>1/1</code>, <code>2/1</code>, <code>1/0</code>.</p>
<p>Continuing on like this results in an infinite binary search tree which preserves the usual ordering of rational numbers.</p>
<p>The figure below shows the 1st 4 levels of the Stern-Brocot tree.</p>
<figure><img src="/img/stern-brocot.png"
         alt="The first 4 levels of Stern-Brocot Tree"/><figcaption>
            <p>The first 4 levels of Stern-Brocot Tree</p>
        </figcaption>
</figure>

<h2 id="finding-the-path-to-k-in-stern-brocot-tree">Finding the Path to k in Stern-Brocot Tree</h2>
<p>The path from the root of the tree to a number <code>k</code> in the Stern-Brocot tree can be found using binary search. At each node, <code>k</code> will either be in the left half of the tree, or the right half. We continue down the left or right subtree until we finally find <code>k</code>.</p>
<ul>
<li>Initialize the left fraction <code>L</code> to <code>0/1</code> and right fraction <code>R</code> to <code>1/0</code></li>
<li>Repeat the following until <code>k</code> is found:
<ul>
<li>Compute the mediant <code>M</code> (which is <code>(m+m')/(n+n')</code> )</li>
<li>If <code>(k&gt;M)</code>, then <code>k</code> is in the right half of the tree. <code>L:=M</code> and continue.</li>
<li>Else If <code>(M&gt;k)</code>, then <code>k</code> is in the left half of the tree. <code>R:=M</code> and continue.</li>
<li>Else <code>k=M</code>, terminate search.</li>
</ul>
</li>
</ul>
<h2 id="implementation">Implementation</h2>
<p>There&rsquo;s a couple of things to tackle in our implementation. First, I need an easy way to represent fractions, so I create my own <code>SternBrocotFraction</code> class. I deliberately chose to make it very specific to this algorithm because I needed a special way to handle the fraction 1/0 (which by definition is greater than all other rationals).</p>
<p>Secondly, I needed a good way to represent the path from the root of the tree to k. I do this by using a <code>StringBuilder</code>, and at each step I append either the letter <code>L</code> or <code>R</code> depending on which sub-tree we take. When the search is finished, this gives us a string representation of the path from the root of the tree to the number <code>k</code>. This approach is similar to the approach advocated by ACM Programming Competitions for <a href="http://acm.uva.es/p/v100/10077.html">the &ldquo;Stern-Brocot Number System&rdquo; problem</a>.</p>
<p>Here&rsquo;s the code to find path to a number k:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span><span style="color:#f92672">package</span> com.umairsaeed.algorithm<span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">public</span> <span style="color:#66d9ef">class</span> <span style="color:#a6e22e">SternBrocotPath</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">private</span> <span style="color:#66d9ef">static</span> <span style="color:#66d9ef">final</span> <span style="color:#66d9ef">char</span> LEFT_SUB <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39;L&#39;</span><span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">private</span> <span style="color:#66d9ef">static</span> <span style="color:#66d9ef">final</span> <span style="color:#66d9ef">char</span> RIGHT_SUB <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39;R&#39;</span><span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">public</span> String <span style="color:#a6e22e">findPathTo</span><span style="color:#f92672">(</span>SternBrocotFraction f<span style="color:#f92672">)</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>    SternBrocotFraction L <span style="color:#f92672">=</span> <span style="color:#66d9ef">new</span> SternBrocotFraction<span style="color:#f92672">(</span><span style="color:#ae81ff">0</span><span style="color:#f92672">,</span> <span style="color:#ae81ff">1</span><span style="color:#f92672">);</span>
</span></span><span style="display:flex;"><span>    SternBrocotFraction R <span style="color:#f92672">=</span> <span style="color:#66d9ef">new</span> SternBrocotFraction<span style="color:#f92672">(</span><span style="color:#ae81ff">1</span><span style="color:#f92672">,</span> <span style="color:#ae81ff">0</span><span style="color:#f92672">);</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    StringBuilder results <span style="color:#f92672">=</span> <span style="color:#66d9ef">new</span> StringBuilder<span style="color:#f92672">();</span>
</span></span><span style="display:flex;"><span>    SternBrocotPath<span style="color:#f92672">.</span><span style="color:#a6e22e">find</span><span style="color:#f92672">(</span>f<span style="color:#f92672">,</span> L<span style="color:#f92672">,</span> R<span style="color:#f92672">,</span> results<span style="color:#f92672">);</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> results<span style="color:#f92672">.</span><span style="color:#a6e22e">toString</span><span style="color:#f92672">();</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">static</span> <span style="color:#66d9ef">void</span> <span style="color:#a6e22e">find</span><span style="color:#f92672">(</span>SternBrocotFraction f<span style="color:#f92672">,</span>
</span></span><span style="display:flex;"><span>      SternBrocotFraction L<span style="color:#f92672">,</span>
</span></span><span style="display:flex;"><span>      SternBrocotFraction R<span style="color:#f92672">,</span>
</span></span><span style="display:flex;"><span>      StringBuilder results<span style="color:#f92672">)</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>    SternBrocotFraction M <span style="color:#f92672">=</span> L<span style="color:#f92672">.</span><span style="color:#a6e22e">add</span><span style="color:#f92672">(</span>R<span style="color:#f92672">);</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">if</span> <span style="color:#f92672">(</span>M<span style="color:#f92672">.</span><span style="color:#a6e22e">compareTo</span><span style="color:#f92672">(</span>f<span style="color:#f92672">)</span> <span style="color:#f92672">&lt;</span> <span style="color:#ae81ff">0</span><span style="color:#f92672">)</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>      L <span style="color:#f92672">=</span> M<span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span>      results<span style="color:#f92672">.</span><span style="color:#a6e22e">append</span><span style="color:#f92672">(</span>RIGHT_SUB<span style="color:#f92672">);</span>
</span></span><span style="display:flex;"><span>      SternBrocotPath<span style="color:#f92672">.</span><span style="color:#a6e22e">find</span><span style="color:#f92672">(</span>f<span style="color:#f92672">,</span> L<span style="color:#f92672">,</span> R<span style="color:#f92672">,</span> results<span style="color:#f92672">);</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">}</span> <span style="color:#66d9ef">else</span> <span style="color:#66d9ef">if</span> <span style="color:#f92672">(</span>M<span style="color:#f92672">.</span><span style="color:#a6e22e">compareTo</span><span style="color:#f92672">(</span>f<span style="color:#f92672">)</span> <span style="color:#f92672">&gt;</span> <span style="color:#ae81ff">0</span><span style="color:#f92672">)</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>      R <span style="color:#f92672">=</span> M<span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span>      results<span style="color:#f92672">.</span><span style="color:#a6e22e">append</span><span style="color:#f92672">(</span>LEFT_SUB<span style="color:#f92672">);</span>
</span></span><span style="display:flex;"><span>      SternBrocotPath<span style="color:#f92672">.</span><span style="color:#a6e22e">find</span><span style="color:#f92672">(</span>f<span style="color:#f92672">,</span> L<span style="color:#f92672">,</span> R<span style="color:#f92672">,</span> results<span style="color:#f92672">);</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span><span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">}</span>
</span></span></code></pre></div><p>The special <code>SternBrocotFraction</code> class is:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span><span style="color:#f92672">package</span> com.umairsaeed.algorithm<span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">public</span> <span style="color:#66d9ef">class</span> <span style="color:#a6e22e">SternBrocotFraction</span> <span style="color:#66d9ef">implements</span>
</span></span><span style="display:flex;"><span>        Comparable<span style="color:#f92672">&lt;</span>SternBrocotFraction<span style="color:#f92672">&gt;</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">private</span> <span style="color:#66d9ef">int</span> numerator<span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">private</span> <span style="color:#66d9ef">int</span> denominator<span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">public</span> <span style="color:#a6e22e">SternBrocotFraction</span><span style="color:#f92672">(</span><span style="color:#66d9ef">int</span> numerator<span style="color:#f92672">,</span> <span style="color:#66d9ef">int</span> denominator<span style="color:#f92672">)</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">if</span> <span style="color:#f92672">(</span>denominator <span style="color:#f92672">&lt;</span> <span style="color:#ae81ff">0</span><span style="color:#f92672">)</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>      numerator <span style="color:#f92672">*=</span> <span style="color:#f92672">-</span><span style="color:#ae81ff">1</span><span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span>      denominator <span style="color:#f92672">*=</span> <span style="color:#f92672">-</span><span style="color:#ae81ff">1</span><span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">this</span><span style="color:#f92672">.</span><span style="color:#a6e22e">numerator</span> <span style="color:#f92672">=</span> numerator<span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">this</span><span style="color:#f92672">.</span><span style="color:#a6e22e">denominator</span> <span style="color:#f92672">=</span> denominator<span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">double</span> <span style="color:#a6e22e">doubleValue</span><span style="color:#f92672">()</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">if</span> <span style="color:#f92672">(</span><span style="color:#66d9ef">this</span><span style="color:#f92672">.</span><span style="color:#a6e22e">denominator</span> <span style="color:#f92672">==</span> <span style="color:#ae81ff">0</span><span style="color:#f92672">)</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>      <span style="color:#66d9ef">return</span> Double<span style="color:#f92672">.</span><span style="color:#a6e22e">MAX_VALUE</span><span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">}</span> <span style="color:#66d9ef">else</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>      <span style="color:#66d9ef">return</span> <span style="color:#f92672">(</span><span style="color:#66d9ef">double</span><span style="color:#f92672">)</span> <span style="color:#66d9ef">this</span><span style="color:#f92672">.</span><span style="color:#a6e22e">numerator</span> <span style="color:#f92672">/</span>
</span></span><span style="display:flex;"><span>            <span style="color:#f92672">(</span><span style="color:#66d9ef">double</span><span style="color:#f92672">)</span> <span style="color:#66d9ef">this</span><span style="color:#f92672">.</span><span style="color:#a6e22e">denominator</span><span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">public</span> SternBrocotFraction <span style="color:#a6e22e">add</span><span style="color:#f92672">(</span>SternBrocotFraction other<span style="color:#f92672">)</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> <span style="color:#66d9ef">new</span> SternBrocotFraction<span style="color:#f92672">(</span>
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">this</span><span style="color:#f92672">.</span><span style="color:#a6e22e">numerator</span> <span style="color:#f92672">+</span> other<span style="color:#f92672">.</span><span style="color:#a6e22e">numerator</span><span style="color:#f92672">,</span>
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">this</span><span style="color:#f92672">.</span><span style="color:#a6e22e">denominator</span> <span style="color:#f92672">+</span> other<span style="color:#f92672">.</span><span style="color:#a6e22e">denominator</span><span style="color:#f92672">);</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">int</span> <span style="color:#a6e22e">compareTo</span><span style="color:#f92672">(</span>SternBrocotFraction other<span style="color:#f92672">)</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">if</span> <span style="color:#f92672">(</span><span style="color:#66d9ef">this</span><span style="color:#f92672">.</span><span style="color:#a6e22e">doubleValue</span><span style="color:#f92672">()</span> <span style="color:#f92672">&lt;</span> other<span style="color:#f92672">.</span><span style="color:#a6e22e">doubleValue</span><span style="color:#f92672">())</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>      <span style="color:#66d9ef">return</span> <span style="color:#f92672">-</span><span style="color:#ae81ff">1</span><span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">}</span> <span style="color:#66d9ef">else</span> <span style="color:#66d9ef">if</span> <span style="color:#f92672">(</span><span style="color:#66d9ef">this</span><span style="color:#f92672">.</span><span style="color:#a6e22e">doubleValue</span><span style="color:#f92672">()</span> <span style="color:#f92672">&gt;</span> other<span style="color:#f92672">.</span><span style="color:#a6e22e">doubleValue</span><span style="color:#f92672">())</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>      <span style="color:#66d9ef">return</span> <span style="color:#ae81ff">1</span><span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> <span style="color:#ae81ff">0</span><span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">}</span>
</span></span></code></pre></div><p>Finally, some test code to exercise my class:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span><span style="color:#f92672">package</span> com.umairsaeed.algorithm<span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">public</span> <span style="color:#66d9ef">class</span> <span style="color:#a6e22e">SternBrocotTester</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">static</span> <span style="color:#66d9ef">void</span> <span style="color:#a6e22e">main</span><span style="color:#f92672">(</span>String<span style="color:#f92672">[]</span> args<span style="color:#f92672">)</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>    testSternBrocotPath<span style="color:#f92672">();</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">static</span> <span style="color:#66d9ef">void</span> <span style="color:#a6e22e">testSternBrocotPath</span><span style="color:#f92672">()</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>    SternBrocotPath t <span style="color:#f92672">=</span> <span style="color:#66d9ef">new</span> SternBrocotPath<span style="color:#f92672">();</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    SternBrocotFraction f <span style="color:#f92672">=</span> <span style="color:#66d9ef">new</span> SternBrocotFraction<span style="color:#f92672">(</span><span style="color:#ae81ff">5</span><span style="color:#f92672">,</span> <span style="color:#ae81ff">7</span><span style="color:#f92672">);</span>
</span></span><span style="display:flex;"><span>    System<span style="color:#f92672">.</span><span style="color:#a6e22e">out</span><span style="color:#f92672">.</span><span style="color:#a6e22e">println</span><span style="color:#f92672">(</span>t<span style="color:#f92672">.</span><span style="color:#a6e22e">findPathTo</span><span style="color:#f92672">(</span>f<span style="color:#f92672">));</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    f <span style="color:#f92672">=</span> <span style="color:#66d9ef">new</span> SternBrocotFraction<span style="color:#f92672">(</span><span style="color:#ae81ff">19</span><span style="color:#f92672">,</span> <span style="color:#ae81ff">101</span><span style="color:#f92672">);</span>
</span></span><span style="display:flex;"><span>    System<span style="color:#f92672">.</span><span style="color:#a6e22e">out</span><span style="color:#f92672">.</span><span style="color:#a6e22e">println</span><span style="color:#f92672">(</span>t<span style="color:#f92672">.</span><span style="color:#a6e22e">findPathTo</span><span style="color:#f92672">(</span>f<span style="color:#f92672">));</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    f <span style="color:#f92672">=</span> <span style="color:#66d9ef">new</span> SternBrocotFraction<span style="color:#f92672">(</span><span style="color:#ae81ff">977</span><span style="color:#f92672">,</span> <span style="color:#ae81ff">331</span><span style="color:#f92672">);</span>
</span></span><span style="display:flex;"><span>    System<span style="color:#f92672">.</span><span style="color:#a6e22e">out</span><span style="color:#f92672">.</span><span style="color:#a6e22e">println</span><span style="color:#f92672">(</span>t<span style="color:#f92672">.</span><span style="color:#a6e22e">findPathTo</span><span style="color:#f92672">(</span>f<span style="color:#f92672">));</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    f <span style="color:#f92672">=</span> <span style="color:#66d9ef">new</span> SternBrocotFraction<span style="color:#f92672">(</span><span style="color:#ae81ff">1049</span><span style="color:#f92672">,</span> <span style="color:#ae81ff">7901</span><span style="color:#f92672">);</span>
</span></span><span style="display:flex;"><span>    System<span style="color:#f92672">.</span><span style="color:#a6e22e">out</span><span style="color:#f92672">.</span><span style="color:#a6e22e">println</span><span style="color:#f92672">(</span>t<span style="color:#f92672">.</span><span style="color:#a6e22e">findPathTo</span><span style="color:#f92672">(</span>f<span style="color:#f92672">));</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">}</span>
</span></span></code></pre></div>]]></content>
    
  </entry>
  <entry>
    <title type="html"><![CDATA[Manual Memory Management in Objective-C]]></title>
    <link href="https://umairsaeed.com/manual-memory-management-in-objective-c/"/>
    <id>https://umairsaeed.com/manual-memory-management-in-objective-c/</id>
    <author>
      <name>Umair Saeed</name>
    </author>
    <published>2011-01-24T19:10:40+00:00</published>
    <updated>2011-01-24T19:10:40+00:00</updated>
    
    <content type="html"><![CDATA[<p>Objective-C on iOS has no garbage collector, so it is up to the programmer to make sure that memory is properly freed once an object is no longer needed. On the other hand, Objective-C on the Mac does have a garbage collector (in Objective C 2.0). This blog post focuses on how to manage memory in the absence of a garbage collector.</p>
<p>When managing memory manually, two major issues to watch out for are premature deallocation and memory leaks.</p>
<p>Cocoa Touch framework uses manual <a href="http://en.wikipedia.org/wiki/Reference_counting">reference counting</a> to manage memory on the iOS devices. Reference counting works on the principle that once created, every object has an owner. During its existence, its owner may change and it may even have more than one owners. When the number of owners for an object drops to zero, it deallocates itself to free up the memory being used.</p>
<h2 id="retain--release"><code>retain</code> &amp; <code>release</code></h2>
<p>Owners are tracked via retain counts. When an object is created it always has a retain count of 1. To own an object its retain count is incremented via the <code>retain</code> message. On the other hand, when the object is no longer needed its ownership is relinquished by decrementing the retain count via the <code>release</code> message. When the count reaches zero, the object sends itself the <code>dealloc</code> message and returns all the memory back to the heap.</p>
<h2 id="autorelease"><code>autorelease</code></h2>
<p><code>autorelease</code> marks an object for future release (delayed release). When an object is sent the autorelease message, it is added to an instance of <code>NSAutoreleasePool</code>. The Autorelease pool keeps track of all the objects that have been sent the <code>autorelease</code> message. This pool is drained periodically, at which time all the objects within it are sent the release message.</p>
<p><code>autorelease</code> is really handy when the creator of an object (e.g. a factory) simply creates the object and returns it to the caller. At this point, the creator has nothing to do with the object anymore, so it is up to the caller to retain the returned object in order to continue using it.</p>
<h2 id="an-example---a-ticket-class">An Example - A Ticket class</h2>
<p>Let us work through an example to see manual memory management in action. Suppose I am writing a ticketing framework, and I have a Ticket entity. The header file for Ticket looks as:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-objc" data-lang="objc"><span style="display:flex;"><span><span style="color:#66d9ef">@interface</span> <span style="color:#a6e22e">Ticket</span> : <span style="color:#a6e22e">NSObject</span> {
</span></span><span style="display:flex;"><span>  NSString <span style="color:#f92672">*</span>ticketId;
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>- (NSString <span style="color:#f92672">*</span>) <span style="color:#a6e22e">ticketId</span>;
</span></span><span style="display:flex;"><span>- (<span style="color:#66d9ef">void</span>) <span style="color:#a6e22e">setTicketId:</span>(NSString <span style="color:#f92672">*</span>) tid;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>- (<span style="color:#66d9ef">id</span>) <span style="color:#a6e22e">initWithId:</span>(NSString <span style="color:#f92672">*</span>) tid;
</span></span><span style="display:flex;"><span>+ (<span style="color:#66d9ef">id</span>) <span style="color:#a6e22e">ticketWithId:</span>(NSString <span style="color:#f92672">*</span>) tid;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">@end</span>
</span></span></code></pre></div><p>And the implementation file for Ticket looks as follows:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-objc" data-lang="objc"><span style="display:flex;"><span><span style="color:#75715e">#import &#34;Ticket.h&#34;
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#66d9ef">@implementation</span> <span style="color:#a6e22e">Ticket</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>- (<span style="color:#66d9ef">void</span>) <span style="color:#a6e22e">dealloc</span>
</span></span><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>  [ticketId <span style="color:#66d9ef">release</span>];
</span></span><span style="display:flex;"><span>  [super dealloc];
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>- (NSString <span style="color:#f92672">*</span>) <span style="color:#a6e22e">ticketId</span>
</span></span><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">return</span> ticketId;
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>- (<span style="color:#66d9ef">void</span>) <span style="color:#a6e22e">setTicketId:</span>(NSString <span style="color:#f92672">*</span>)tid
</span></span><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>  [tid <span style="color:#66d9ef">retain</span>];
</span></span><span style="display:flex;"><span>  [ticketId <span style="color:#66d9ef">release</span>];
</span></span><span style="display:flex;"><span>  ticketId <span style="color:#f92672">=</span> tid;
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>- (<span style="color:#66d9ef">id</span>) <span style="color:#a6e22e">initWithId:</span>(NSString <span style="color:#f92672">*</span>) tid
</span></span><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">if</span> (self <span style="color:#f92672">=</span> [super init])
</span></span><span style="display:flex;"><span>  {
</span></span><span style="display:flex;"><span>    [self setTicketId:tid];
</span></span><span style="display:flex;"><span>  }
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">return</span> self;
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>+ (<span style="color:#66d9ef">id</span>) <span style="color:#a6e22e">ticketWithId:</span>(NSString <span style="color:#f92672">*</span>)tid
</span></span><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>  Ticket <span style="color:#f92672">*</span>newTkt <span style="color:#f92672">=</span> [[Ticket alloc] initWithId:tid];
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">return</span> [newTkt autorelease];
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">@end</span>
</span></span></code></pre></div><p>There are three memory management points to note here:</p>
<ol>
<li>
<p>Inside <code>dealloc</code>, an object must release all its instance variables first. Then it should go up its class hierarchy and release any instance variables of its superclass. We should never directly send the <code>dealloc</code> message to instance variables, as some other objects might still have references to those variables.</p>
</li>
<li>
<p>A setter must retain the value passed in before it releases the old value, as <code>tid</code> and <code>ticketId</code> could be pointers to the same object.</p>
</li>
<li>
<p>The <code>ticketWithId:</code> method creates a ticket and simply returns it to the caller. It has no use for the <code>newTkt</code>, but it owns <code>newTkt</code> by virtue of creating it. At this point, if <code>newTkt</code> were released before method exit, then the caller would get a pointer to unallocated heap. To avoid this, we put the <code>newTkt</code> on the autorelease pool. Periodically, the autorelease pool is drained and all the objects it it are sent the <code>release</code> message thus decrementing the retain count.</p>
</li>
</ol>
<p>Essentially, the <code>ticketWithId:</code> method is saying that it does not want to be the owner for <code>newTkt</code> and puts that responsibility on the caller. If the caller wants to hold on to <code>newTkt</code> once it is returned, it must send it the <code>retain</code> message.</p>
<h4 id="using-the-ticket-class">Using the Ticket class</h4>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-objc" data-lang="objc"><span style="display:flex;"><span><span style="color:#75715e">// EXAMPLE-1
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>- (<span style="color:#66d9ef">void</span>) <span style="color:#a6e22e">processTicketWithId:</span>(NSString <span style="color:#f92672">*</span>)ticketId
</span></span><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>  Ticket<span style="color:#f92672">*</span> tkt <span style="color:#f92672">=</span> [[Ticket alloc] initWithId:ticketId];
</span></span><span style="display:flex;"><span>  <span style="color:#75715e">// Do something with tkt
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>  <span style="color:#75715e">// ...
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>  [tkt <span style="color:#66d9ef">release</span>];
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>At this point, the retain count for <code>tkt</code> is 1. Moreover, since the <code>processTicketWithId:</code> method created the <code>tkt</code> object, it is now the owner and thus is responsible for cleaning it up before this method exits. Clean up is done by sending it the <code>release</code> message
Let&rsquo;s see another example:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-objc" data-lang="objc"><span style="display:flex;"><span><span style="color:#75715e">// EXAMPLE-2
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>- (<span style="color:#66d9ef">void</span>) <span style="color:#a6e22e">processTicketWithId:</span>(NSString <span style="color:#f92672">*</span>)ticketId
</span></span><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>  Ticket<span style="color:#f92672">*</span> tkt <span style="color:#f92672">=</span> [Ticket ticketWithId:ticketId];
</span></span><span style="display:flex;"><span>  [tkt <span style="color:#66d9ef">retain</span>];
</span></span><span style="display:flex;"><span>  <span style="color:#75715e">// Do something with tkt
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>  <span style="color:#75715e">// ..
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>  [tkt <span style="color:#66d9ef">release</span>];
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>In this example, the memory for <code>tkt</code> wasn&rsquo;t allocated by <code>processTicketWithId</code> method, so it doesn&rsquo;t own the <code>tkt</code> object. However, as we&rsquo;ve seen in the implementation of the Ticket class, the <code>ticketWithId:</code> method created the Ticket object and added it to the autorelease pool. In order to continue using <code>tkt</code>, we must retain it so that even if it is drained from the autorelease pool, we can still continue to use the <code>tkt</code> object. Once done, we need to clean up and send the release message.</p>
<h2 id="summary-of-memory-management-rules-for-objective-c">Summary of Memory Management Rules for Objective-C</h2>
<ul>
<li>
<p>Rule-1: If you get/create the object from <code>new</code>, <code>alloc</code> or <code>copy</code>, you must <code>release</code> it when done.</p>
</li>
<li>
<p>Rule-2: If you get the object any other way, assume that it has been autoreleased. If you want to hold on to this object, send it the <code>retain</code> message.</p>
</li>
<li>
<p>Rule-3: If you <code>retain</code> an object, you must balance every <code>retain</code> with a <code>release</code>.</p>
</li>
<li>
<p>Rule-4: Never send the <code>dealloc</code> message to an object directly. Others might be holding references to this object, and if deallocated, they&rsquo;ll be left with pointers to unallocated memory.</p>
</li>
</ul>]]></content>
    
  </entry>
</feed>
